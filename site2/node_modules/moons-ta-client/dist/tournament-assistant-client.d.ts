import { CustomEventEmitter } from "./custom-event-emitter.js";
import { User, Match, QualifierEvent, CoreServer, Tournament, GameplayParameters, Map, QualifierEvent_EventSettings, QualifierEvent_LeaderboardSort, Tournament_TournamentSettings_Team, Tournament_TournamentSettings_Pool, Permissions, RealtimeScore } from "./models/models.js";
import { StateManager } from "./state-manager.js";
import { Response, Response_Connect } from "./models/responses.js";
import { Request_LoadSong, Request_ShowPrompt_PromptOption } from "./models/requests.js";
import { Channel, Push_SongFinished } from "./models/index.js";
export * from "./scraper.js";
export * from "./models/models.js";
export type ResponseFromUser = {
    userId: string;
    response: Response;
};
type TAClientEvents = {
    connectedToServer: Response_Connect;
    connectingToServer: {};
    failedToConnectToServer: {};
    disconnectedFromServer: {};
    authorizationRequestedFromServer: string;
    loadSongRequested: [string, string, Request_LoadSong];
    songFinished: Push_SongFinished;
    realtimeScore: RealtimeScore;
    responseReceived: ResponseFromUser;
    joinedTournament: {};
    failedToJoinTournament: {};
    createdTournament: {};
    updatedTournament: {};
    deletedTournament: {};
    failedToCreateTournament: {};
    failedToUpdateTournament: {};
    failedToDeleteTournament: {};
    createdMatch: {};
    updatedMatch: {};
    deletedMatch: {};
    failedToCreateMatch: {};
    failedToUpdateMatch: {};
    failedToDeleteMatch: {};
    createdQualifier: {};
    updatedQualifier: {};
    deletedQualifier: {};
    failedToCreateQualifier: {};
    failedToUpdateQualifier: {};
    failedToDeleteQualifier: {};
};
export declare class TAClient extends CustomEventEmitter<TAClientEvents> {
    stateManager: StateManager;
    private uiVersion;
    private client?;
    private token;
    private shouldHeartbeat;
    private heartbeatInterval;
    constructor(uiVersion?: number | undefined);
    get isConnected(): boolean;
    get isConnecting(): boolean;
    connect(serverAddress: string, port: string): Promise<Response>;
    disconnect(): void;
    setAuthToken(token: string): void;
    private forwardToUsers;
    private sendCommand;
    private sendRequest;
    sendResponse(response: Response, to?: string[]): Promise<void>;
    playSong: (gameplayParameters: GameplayParameters, userIds: string[]) => void;
    returnToMenu: (userIds: string[]) => void;
    showLoadedImage: (userIds: string[]) => void;
    delayTestFinished: (userIds: string[]) => void;
    joinTournament: (tournamentId: string) => Promise<Response>;
    getLeaderboard: (tournamentId: string, qualifierId: string, mapId: string) => Promise<Response>;
    loadSong: (levelId: string, userIds: string[], timeout?: number) => Promise<ResponseFromUser[]>;
    loadImage: (bitmap: Uint8Array, userIds: string[]) => Promise<ResponseFromUser[]>;
    showPrompt: (userIds: string[], titleText: string, bodyText: string, canClose: boolean, options: Request_ShowPrompt_PromptOption[], timer?: number) => Promise<ResponseFromUser[]>;
    private handlePacket;
    updateUser: (tournamentId: string, user: User) => Promise<Response>;
    createMatch: (tournamentId: string, match: Match) => Promise<Response>;
    addUserToMatch: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    removeUserFromMatch: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    setMatchLeader: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    setMatchMap: (tournamentId: string, matchId: string, map: Map) => Promise<Response>;
    deleteMatch: (tournamentId: string, matchId: string) => Promise<Response>;
    createQualifierEvent: (tournamentId: string, event: QualifierEvent) => Promise<Response>;
    setQualifierName: (tournamentId: string, qualifierId: string, qualifierName: string) => Promise<Response>;
    setQualifierImage: (tournamentId: string, qualifierId: string, qualifierImage: Uint8Array) => Promise<Response>;
    setQualifierInfoChannel: (tournamentId: string, qualifierId: string, infoChannel: Channel) => Promise<Response>;
    setQualifierFlags: (tournamentId: string, qualifierId: string, qualifierFlags: QualifierEvent_EventSettings) => Promise<Response>;
    setQualifierLeaderboardSort: (tournamentId: string, qualifierId: string, qualifierLeaderboardSort: QualifierEvent_LeaderboardSort) => Promise<Response>;
    addQualifierMaps: (tournamentId: string, qualifierId: string, maps: Map[]) => Promise<Response>;
    updateQualifierMap: (tournamentId: string, qualifierId: string, map: Map) => Promise<Response>;
    removeQualifierMap: (tournamentId: string, qualifierId: string, mapId: string) => Promise<Response>;
    deleteQualifierEvent: (tournamentId: string, qualifierId: string) => Promise<Response>;
    addAuthorizedUser: (tournamentId: string, discordId: string, permissionFlags: Permissions) => Promise<Response>;
    removeAuthorizedUser: (tournamentId: string, discordId: string) => Promise<Response>;
    getAuthorizedUsers: (tournamentId: string) => Promise<Response>;
    getDiscordInfo: (tournamentId: string, discordId: string) => Promise<Response>;
    getBotTokensForUser: (ownerDiscordId: string) => Promise<Response>;
    generateBotToken: (username: string) => Promise<Response>;
    revokeBotToken: (botTokenGuid: string) => Promise<Response>;
    createTournament: (tournament: Tournament) => Promise<Response>;
    setTournamentName: (tournamentId: string, tournamentName: string) => Promise<Response>;
    setTournamentImage: (tournamentId: string, tournamentImage: Uint8Array) => Promise<Response>;
    setTournamentEnableTeams: (tournamentId: string, enableTeams: boolean) => Promise<Response>;
    setTournamentEnablePools: (tournamentId: string, enablePools: boolean) => Promise<Response>;
    setTournamentShowTournamentButton: (tournamentId: string, showTournamentButton: boolean) => Promise<Response>;
    setTournamentShowQualifierButton: (tournamentId: string, showQualifierButton: boolean) => Promise<Response>;
    setTournamentAllowUnauthorizedView: (tournamentId: string, allowUnauthorizedView: boolean) => Promise<Response>;
    setTournamentScoreUpdateFrequency: (tournamentId: string, scoreUpdateFrequency: number) => Promise<Response>;
    setTournamentBannedMods: (tournamentId: string, bannedMods: string[]) => Promise<Response>;
    addTournamentTeam: (tournamentId: string, team: Tournament_TournamentSettings_Team) => Promise<Response>;
    setTournamentTeamName: (tournamentId: string, teamId: string, teamName: string) => Promise<Response>;
    setTournamentTeamImage: (tournamentId: string, teamId: string, teamImage: Uint8Array) => Promise<Response>;
    removeTournamentTeam: (tournamentId: string, teamId: string) => Promise<Response>;
    addTournamentPool: (tournamentId: string, pool: Tournament_TournamentSettings_Pool) => Promise<Response>;
    setTournamentPoolName: (tournamentId: string, poolId: string, poolName: string) => Promise<Response>;
    addTournamentPoolMaps: (tournamentId: string, poolId: string, maps: Map[]) => Promise<Response>;
    updateTournamentPoolMap: (tournamentId: string, poolId: string, map: Map) => Promise<Response>;
    removeTournamentPoolMap: (tournamentId: string, poolId: string, mapId: string) => Promise<Response>;
    removeTournamentPool: (tournamentId: string, poolId: string) => Promise<Response>;
    deleteTournament: (tournamentId: string) => Promise<Response>;
    addServer: (server: CoreServer, authToken?: string) => Promise<Response>;
}
