import { MessageType, PartialMessage, IBinaryReader, BinaryReadOptions, IBinaryWriter, BinaryWriteOptions } from '@protobuf-ts/runtime';

declare class CustomEventEmitter<T extends Record<string, any>> {
    private emitter;
    get on(): <K extends Extract<keyof T, string | symbol>>(eventName: K, fn: (params: T[K]) => void) => void;
    get once(): <K extends Extract<keyof T, string | symbol>>(eventName: K, fn: (params: T[K]) => void) => void;
    get emit(): <K extends Extract<keyof T, string | symbol>>(eventName: K, params: T[K]) => void;
    get removeListener(): <K extends Extract<keyof T, string | symbol>>(eventName: K, fn: (params: T[K]) => void) => void;
}

declare class Channel$Type extends MessageType<Channel> {
    constructor();
    create(value?: PartialMessage<Channel>): Channel;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Channel): Channel;
    internalBinaryWrite(message: Channel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.discord.Channel
 */
interface Channel {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated MessageType for protobuf message proto.discord.Channel
 */
declare const Channel: Channel$Type;
declare class DiscordUser$Type extends MessageType<DiscordUser> {
    constructor();
    create(value?: PartialMessage<DiscordUser>): DiscordUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscordUser): DiscordUser;
    internalBinaryWrite(message: DiscordUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.discord.DiscordUser
 */
interface DiscordUser {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated MessageType for protobuf message proto.discord.DiscordUser
 */
declare const DiscordUser: DiscordUser$Type;
declare class Guild$Type extends MessageType<Guild> {
    constructor();
    create(value?: PartialMessage<Guild>): Guild;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Guild): Guild;
    internalBinaryWrite(message: Guild, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.discord.Guild
 */
interface Guild {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated MessageType for protobuf message proto.discord.Guild
 */
declare const Guild: Guild$Type;

/**
 * @generated from protobuf enum proto.models.GameplayModifiers.GameOptions
 */
declare enum GameplayModifiers_GameOptions {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * Negative modifiers
     *
     * @generated from protobuf enum value: NoFail = 1;
     */
    NoFail = 1,
    /**
     * @generated from protobuf enum value: NoBombs = 2;
     */
    NoBombs = 2,
    /**
     * @generated from protobuf enum value: NoArrows = 4;
     */
    NoArrows = 4,
    /**
     * @generated from protobuf enum value: NoObstacles = 8;
     */
    NoObstacles = 8,
    /**
     * @generated from protobuf enum value: SlowSong = 16;
     */
    SlowSong = 16,
    /**
     * Positive Modifiers
     *
     * @generated from protobuf enum value: InstaFail = 32;
     */
    InstaFail = 32,
    /**
     * @generated from protobuf enum value: FailOnClash = 64;
     */
    FailOnClash = 64,
    /**
     * @generated from protobuf enum value: BatteryEnergy = 128;
     */
    BatteryEnergy = 128,
    /**
     * @generated from protobuf enum value: FastNotes = 256;
     */
    FastNotes = 256,
    /**
     * @generated from protobuf enum value: FastSong = 512;
     */
    FastSong = 512,
    /**
     * @generated from protobuf enum value: DisappearingArrows = 1024;
     */
    DisappearingArrows = 1024,
    /**
     * @generated from protobuf enum value: GhostNotes = 2048;
     */
    GhostNotes = 2048,
    /**
     * 1.12.2 Additions
     *
     * @generated from protobuf enum value: DemoNoFail = 4096;
     */
    DemoNoFail = 4096,
    /**
     * @generated from protobuf enum value: DemoNoObstacles = 8192;
     */
    DemoNoObstacles = 8192,
    /**
     * @generated from protobuf enum value: StrictAngles = 16384;
     */
    StrictAngles = 16384,
    /**
     * 1.13.4 Additions
     *
     * @generated from protobuf enum value: ProMode = 32768;
     */
    ProMode = 32768,
    /**
     * @generated from protobuf enum value: ZenMode = 65536;
     */
    ZenMode = 65536,
    /**
     * @generated from protobuf enum value: SmallCubes = 131072;
     */
    SmallCubes = 131072,
    /**
     * @generated from protobuf enum value: SuperFastSong = 262144;
     */
    SuperFastSong = 262144
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.PlayerOptions
 */
declare enum PlayerSpecificSettings_PlayerOptions {
    /**
     * @generated from protobuf enum value: NoPlayerOptions = 0;
     */
    NoPlayerOptions = 0,
    /**
     * @generated from protobuf enum value: LeftHanded = 1;
     */
    LeftHanded = 1,
    /**
     * @generated from protobuf enum value: StaticLights = 2;
     */
    StaticLights = 2,
    /**
     * @generated from protobuf enum value: NoHud = 4;
     */
    NoHud = 4,
    /**
     * @generated from protobuf enum value: AdvancedHud = 8;
     */
    AdvancedHud = 8,
    /**
     * @generated from protobuf enum value: ReduceDebris = 16;
     */
    ReduceDebris = 16,
    /**
     * @generated from protobuf enum value: AutoPlayerHeight = 32;
     */
    AutoPlayerHeight = 32,
    /**
     * @generated from protobuf enum value: NoFailEffects = 64;
     */
    NoFailEffects = 64,
    /**
     * @generated from protobuf enum value: AutoRestart = 128;
     */
    AutoRestart = 128,
    /**
     * @generated from protobuf enum value: HideNoteSpawnEffect = 256;
     */
    HideNoteSpawnEffect = 256,
    /**
     * @generated from protobuf enum value: AdaptiveSfx = 512;
     */
    AdaptiveSfx = 512,
    /**
     * @generated from protobuf enum value: ArcsHapticFeedback = 1024;
     */
    ArcsHapticFeedback = 1024
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.NoteJumpDurationTypeSettings
 */
declare enum PlayerSpecificSettings_NoteJumpDurationTypeSettings {
    /**
     * @generated from protobuf enum value: Dynamic = 0;
     */
    Dynamic = 0,
    /**
     * @generated from protobuf enum value: Static = 1;
     */
    Static = 1
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.ArcVisibilityType
 */
declare enum PlayerSpecificSettings_ArcVisibilityType {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Low = 1;
     */
    Low = 1,
    /**
     * @generated from protobuf enum value: Standard = 2;
     */
    Standard = 2,
    /**
     * @generated from protobuf enum value: High = 3;
     */
    High = 3
}
/**
 * @generated from protobuf enum proto.models.User.PlayStates
 */
declare enum User_PlayStates {
    /**
     * @generated from protobuf enum value: InMenu = 0;
     */
    InMenu = 0,
    /**
     * @generated from protobuf enum value: WaitingForCoordinator = 1;
     */
    WaitingForCoordinator = 1,
    /**
     * @generated from protobuf enum value: InGame = 2;
     */
    InGame = 2
}
/**
 * @generated from protobuf enum proto.models.User.DownloadStates
 */
declare enum User_DownloadStates {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Downloading = 1;
     */
    Downloading = 1,
    /**
     * @generated from protobuf enum value: Downloaded = 2;
     */
    Downloaded = 2,
    /**
     * @generated from protobuf enum value: DownloadError = 3;
     */
    DownloadError = 3
}
/**
 * @generated from protobuf enum proto.models.User.ClientTypes
 */
declare enum User_ClientTypes {
    /**
     * @generated from protobuf enum value: Player = 0;
     */
    Player = 0,
    /**
     * @generated from protobuf enum value: WebsocketConnection = 1;
     */
    WebsocketConnection = 1
}
/**
 * @generated from protobuf enum proto.models.QualifierEvent.EventSettings
 */
declare enum QualifierEvent_EventSettings {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: HideScoresFromPlayers = 1;
     */
    HideScoresFromPlayers = 1,
    /**
     * @generated from protobuf enum value: DisableScoresaberSubmission = 2;
     */
    DisableScoresaberSubmission = 2,
    /**
     * @generated from protobuf enum value: EnableDiscordScoreFeed = 4;
     */
    EnableDiscordScoreFeed = 4,
    /**
     * @generated from protobuf enum value: EnableDiscordLeaderboard = 8;
     */
    EnableDiscordLeaderboard = 8
}
/**
 * @generated from protobuf enum proto.models.QualifierEvent.LeaderboardSort
 */
declare enum QualifierEvent_LeaderboardSort {
    /**
     * @generated from protobuf enum value: ModifiedScore = 0;
     */
    ModifiedScore = 0,
    /**
     * @generated from protobuf enum value: ModifiedScoreAscending = 1;
     */
    ModifiedScoreAscending = 1,
    /**
     * @generated from protobuf enum value: ModifiedScoreTarget = 2;
     */
    ModifiedScoreTarget = 2,
    /**
     * @generated from protobuf enum value: NotesMissed = 3;
     */
    NotesMissed = 3,
    /**
     * @generated from protobuf enum value: NotesMissedAscending = 4;
     */
    NotesMissedAscending = 4,
    /**
     * @generated from protobuf enum value: NotesMissedTarget = 5;
     */
    NotesMissedTarget = 5,
    /**
     * @generated from protobuf enum value: BadCuts = 6;
     */
    BadCuts = 6,
    /**
     * @generated from protobuf enum value: BadCutsAscending = 7;
     */
    BadCutsAscending = 7,
    /**
     * @generated from protobuf enum value: BadCutsTarget = 8;
     */
    BadCutsTarget = 8,
    /**
     * @generated from protobuf enum value: MaxCombo = 9;
     */
    MaxCombo = 9,
    /**
     * @generated from protobuf enum value: MaxComboAscending = 10;
     */
    MaxComboAscending = 10,
    /**
     * @generated from protobuf enum value: MaxComboTarget = 11;
     */
    MaxComboTarget = 11,
    /**
     * @generated from protobuf enum value: GoodCuts = 12;
     */
    GoodCuts = 12,
    /**
     * @generated from protobuf enum value: GoodCutsAscending = 13;
     */
    GoodCutsAscending = 13,
    /**
     * @generated from protobuf enum value: GoodCutsTarget = 14;
     */
    GoodCutsTarget = 14
}
/**
 * @generated from protobuf enum proto.models.Permissions
 */
declare enum Permissions {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: View = 1;
     */
    View = 1,
    /**
     * @generated from protobuf enum value: Admin = 2;
     */
    Admin = 2
}
declare class Characteristic$Type extends MessageType<Characteristic> {
    constructor();
    create(value?: PartialMessage<Characteristic>): Characteristic;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Characteristic): Characteristic;
    internalBinaryWrite(message: Characteristic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Characteristic
 */
interface Characteristic {
    /**
     * @generated from protobuf field: string serialized_name = 1;
     */
    serializedName: string;
    /**
     * @generated from protobuf field: repeated int32 difficulties = 2;
     */
    difficulties: number[];
}
/**
 * @generated MessageType for protobuf message proto.models.Characteristic
 */
declare const Characteristic: Characteristic$Type;
declare class Beatmap$Type extends MessageType<Beatmap> {
    constructor();
    create(value?: PartialMessage<Beatmap>): Beatmap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Beatmap): Beatmap;
    internalBinaryWrite(message: Beatmap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Beatmap
 */
interface Beatmap {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string level_id = 2;
     */
    levelId: string;
    /**
     * @generated from protobuf field: proto.models.Characteristic characteristic = 3;
     */
    characteristic?: Characteristic;
    /**
     * @generated from protobuf field: int32 difficulty = 4;
     */
    difficulty: number;
}
/**
 * @generated MessageType for protobuf message proto.models.Beatmap
 */
declare const Beatmap: Beatmap$Type;
declare class GameplayModifiers$Type extends MessageType<GameplayModifiers> {
    constructor();
    create(value?: PartialMessage<GameplayModifiers>): GameplayModifiers;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayModifiers): GameplayModifiers;
    internalBinaryWrite(message: GameplayModifiers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.GameplayModifiers
 */
interface GameplayModifiers {
    /**
     * @generated from protobuf field: proto.models.GameplayModifiers.GameOptions options = 1;
     */
    options: GameplayModifiers_GameOptions;
}
/**
 * @generated MessageType for protobuf message proto.models.GameplayModifiers
 */
declare const GameplayModifiers: GameplayModifiers$Type;
declare class PlayerSpecificSettings$Type extends MessageType<PlayerSpecificSettings> {
    constructor();
    create(value?: PartialMessage<PlayerSpecificSettings>): PlayerSpecificSettings;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSpecificSettings): PlayerSpecificSettings;
    internalBinaryWrite(message: PlayerSpecificSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.PlayerSpecificSettings
 */
interface PlayerSpecificSettings {
    /**
     * @generated from protobuf field: float player_height = 1;
     */
    playerHeight: number;
    /**
     * @generated from protobuf field: float sfx_volume = 2;
     */
    sfxVolume: number;
    /**
     * @generated from protobuf field: float saber_trail_intensity = 3;
     */
    saberTrailIntensity: number;
    /**
     * @generated from protobuf field: float note_jump_start_beat_offset = 4;
     */
    noteJumpStartBeatOffset: number;
    /**
     * @generated from protobuf field: float note_jump_fixed_duration = 5;
     */
    noteJumpFixedDuration: number;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.PlayerOptions options = 6;
     */
    options: PlayerSpecificSettings_PlayerOptions;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.NoteJumpDurationTypeSettings note_jump_duration_type_settings = 7;
     */
    noteJumpDurationTypeSettings: PlayerSpecificSettings_NoteJumpDurationTypeSettings;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.ArcVisibilityType arc_visibility_type = 8;
     */
    arcVisibilityType: PlayerSpecificSettings_ArcVisibilityType;
}
/**
 * @generated MessageType for protobuf message proto.models.PlayerSpecificSettings
 */
declare const PlayerSpecificSettings: PlayerSpecificSettings$Type;
declare class GameplayParameters$Type extends MessageType<GameplayParameters> {
    constructor();
    create(value?: PartialMessage<GameplayParameters>): GameplayParameters;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayParameters): GameplayParameters;
    internalBinaryWrite(message: GameplayParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.GameplayParameters
 */
interface GameplayParameters {
    /**
     * @generated from protobuf field: proto.models.Beatmap beatmap = 1;
     */
    beatmap?: Beatmap;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings player_settings = 2;
     */
    playerSettings?: PlayerSpecificSettings;
    /**
     * @generated from protobuf field: proto.models.GameplayModifiers gameplay_modifiers = 3;
     */
    gameplayModifiers?: GameplayModifiers;
    /**
     * @generated from protobuf field: int32 attempts = 4;
     */
    attempts: number;
    /**
     * @generated from protobuf field: bool show_scoreboard = 5;
     */
    showScoreboard: boolean;
    /**
     * @generated from protobuf field: bool disable_pause = 6;
     */
    disablePause: boolean;
    /**
     * @generated from protobuf field: bool disable_fail = 7;
     */
    disableFail: boolean;
    /**
     * @generated from protobuf field: bool disable_scoresaber_submission = 8;
     */
    disableScoresaberSubmission: boolean;
    /**
     * @generated from protobuf field: bool disable_custom_notes_on_stream = 9;
     */
    disableCustomNotesOnStream: boolean;
    /**
     * @generated from protobuf field: bool use_sync = 10;
     */
    useSync: boolean;
    /**
     * @generated from protobuf field: int32 target = 11;
     */
    target: number;
}
/**
 * @generated MessageType for protobuf message proto.models.GameplayParameters
 */
declare const GameplayParameters: GameplayParameters$Type;
declare class Map$Type extends MessageType<Map> {
    constructor();
    create(value?: PartialMessage<Map>): Map;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Map): Map;
    internalBinaryWrite(message: Map, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Map
 */
interface Map {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 2;
     */
    gameplayParameters?: GameplayParameters;
}
/**
 * @generated MessageType for protobuf message proto.models.Map
 */
declare const Map: Map$Type;
declare class User$Type extends MessageType<User> {
    constructor();
    create(value?: PartialMessage<User>): User;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User;
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.User
 */
interface User {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string platform_id = 3;
     */
    platformId: string;
    /**
     * @generated from protobuf field: proto.models.User.ClientTypes client_type = 4;
     */
    clientType: User_ClientTypes;
    /**
     * @generated from protobuf field: string team_id = 5;
     */
    teamId: string;
    /**
     * @generated from protobuf field: proto.models.User.PlayStates play_state = 6;
     */
    playState: User_PlayStates;
    /**
     * @generated from protobuf field: proto.models.User.DownloadStates download_state = 7;
     */
    downloadState: User_DownloadStates;
    /**
     * @generated from protobuf field: repeated string mod_list = 8;
     */
    modList: string[];
    /**
     * @generated from protobuf field: proto.models.User.Point stream_screen_coordinates = 9;
     */
    streamScreenCoordinates?: User_Point;
    /**
     * @generated from protobuf field: int64 stream_delay_ms = 10;
     */
    streamDelayMs: bigint;
    /**
     * @generated from protobuf field: int64 stream_sync_start_ms = 11;
     */
    streamSyncStartMs: bigint;
    /**
     * @generated from protobuf field: proto.models.User.DiscordInfo discord_info = 12;
     */
    discordInfo?: User_DiscordInfo;
    /**
     * @generated from protobuf field: bytes user_image = 13;
     */
    userImage: Uint8Array;
    /**
     * @generated from protobuf field: proto.models.Permissions permissions = 14;
     */
    permissions: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.models.User
 */
declare const User: User$Type;
declare class User_DiscordInfo$Type extends MessageType<User_DiscordInfo> {
    constructor();
    create(value?: PartialMessage<User_DiscordInfo>): User_DiscordInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_DiscordInfo): User_DiscordInfo;
    internalBinaryWrite(message: User_DiscordInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.User.DiscordInfo
 */
interface User_DiscordInfo {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string avatar_url = 3;
     */
    avatarUrl: string;
}
/**
 * @generated MessageType for protobuf message proto.models.User.DiscordInfo
 */
declare const User_DiscordInfo: User_DiscordInfo$Type;
declare class User_Point$Type extends MessageType<User_Point> {
    constructor();
    create(value?: PartialMessage<User_Point>): User_Point;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_Point): User_Point;
    internalBinaryWrite(message: User_Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.User.Point
 */
interface User_Point {
    /**
     * @generated from protobuf field: int32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 2;
     */
    y: number;
}
/**
 * @generated MessageType for protobuf message proto.models.User.Point
 */
declare const User_Point: User_Point$Type;
declare class Match$Type extends MessageType<Match> {
    constructor();
    create(value?: PartialMessage<Match>): Match;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Match): Match;
    internalBinaryWrite(message: Match, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Match
 */
interface Match {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: repeated string associated_users = 2;
     */
    associatedUsers: string[];
    /**
     * @generated from protobuf field: string leader = 3;
     */
    leader: string;
    /**
     * @generated from protobuf field: proto.models.Map selected_map = 4;
     */
    selectedMap?: Map;
}
/**
 * @generated MessageType for protobuf message proto.models.Match
 */
declare const Match: Match$Type;
declare class QualifierEvent$Type extends MessageType<QualifierEvent> {
    constructor();
    create(value?: PartialMessage<QualifierEvent>): QualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualifierEvent): QualifierEvent;
    internalBinaryWrite(message: QualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.QualifierEvent
 */
interface QualifierEvent {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: proto.discord.Channel info_channel = 4;
     */
    infoChannel?: Channel;
    /**
     * @generated from protobuf field: repeated proto.models.Map qualifier_maps = 5;
     */
    qualifierMaps: Map[];
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.EventSettings flags = 6;
     */
    flags: QualifierEvent_EventSettings;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.LeaderboardSort sort = 7;
     */
    sort: QualifierEvent_LeaderboardSort;
}
/**
 * @generated MessageType for protobuf message proto.models.QualifierEvent
 */
declare const QualifierEvent: QualifierEvent$Type;
declare class CoreServer$Type extends MessageType<CoreServer> {
    constructor();
    create(value?: PartialMessage<CoreServer>): CoreServer;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoreServer): CoreServer;
    internalBinaryWrite(message: CoreServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.CoreServer
 */
interface CoreServer {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: int32 port = 3;
     */
    port: number;
    /**
     * @generated from protobuf field: int32 websocket_port = 4;
     */
    websocketPort: number;
}
/**
 * @generated MessageType for protobuf message proto.models.CoreServer
 */
declare const CoreServer: CoreServer$Type;
declare class Tournament$Type extends MessageType<Tournament> {
    constructor();
    create(value?: PartialMessage<Tournament>): Tournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament): Tournament;
    internalBinaryWrite(message: Tournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Tournament
 */
interface Tournament {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: proto.models.Tournament.TournamentSettings settings = 2;
     */
    settings?: Tournament_TournamentSettings;
    /**
     * @generated from protobuf field: repeated proto.models.User users = 3;
     */
    users: User[];
    /**
     * @generated from protobuf field: repeated proto.models.Match matches = 4;
     */
    matches: Match[];
    /**
     * @generated from protobuf field: repeated proto.models.QualifierEvent qualifiers = 5;
     */
    qualifiers: QualifierEvent[];
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 6;
     */
    server?: CoreServer;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament
 */
declare const Tournament: Tournament$Type;
declare class Tournament_TournamentSettings$Type extends MessageType<Tournament_TournamentSettings> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings>): Tournament_TournamentSettings;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings): Tournament_TournamentSettings;
    internalBinaryWrite(message: Tournament_TournamentSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings
 */
interface Tournament_TournamentSettings {
    /**
     * @generated from protobuf field: string tournament_name = 1;
     */
    tournamentName: string;
    /**
     * @generated from protobuf field: bytes tournament_image = 2;
     */
    tournamentImage: Uint8Array;
    /**
     * @generated from protobuf field: bool enable_teams = 3;
     */
    enableTeams: boolean;
    /**
     * @generated from protobuf field: bool enable_pools = 4;
     */
    enablePools: boolean;
    /**
     * @generated from protobuf field: repeated proto.models.Tournament.TournamentSettings.Team teams = 5;
     */
    teams: Tournament_TournamentSettings_Team[];
    /**
     * @generated from protobuf field: int32 score_update_frequency = 6;
     */
    scoreUpdateFrequency: number;
    /**
     * @generated from protobuf field: repeated string banned_mods = 7;
     */
    bannedMods: string[];
    /**
     * @generated from protobuf field: repeated proto.models.Tournament.TournamentSettings.Pool pools = 8;
     */
    pools: Tournament_TournamentSettings_Pool[];
    /**
     * @generated from protobuf field: bool show_tournament_button = 9;
     */
    showTournamentButton: boolean;
    /**
     * @generated from protobuf field: bool show_qualifier_button = 10;
     */
    showQualifierButton: boolean;
    /**
     * @generated from protobuf field: bool allow_unauthorized_view = 11;
     */
    allowUnauthorizedView: boolean;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings
 */
declare const Tournament_TournamentSettings: Tournament_TournamentSettings$Type;
declare class Tournament_TournamentSettings_Pool$Type extends MessageType<Tournament_TournamentSettings_Pool> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings_Pool>): Tournament_TournamentSettings_Pool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings_Pool): Tournament_TournamentSettings_Pool;
    internalBinaryWrite(message: Tournament_TournamentSettings_Pool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings.Pool
 */
interface Tournament_TournamentSettings_Pool {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: repeated proto.models.Map maps = 4;
     */
    maps: Map[];
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings.Pool
 */
declare const Tournament_TournamentSettings_Pool: Tournament_TournamentSettings_Pool$Type;
declare class Tournament_TournamentSettings_Team$Type extends MessageType<Tournament_TournamentSettings_Team> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings_Team>): Tournament_TournamentSettings_Team;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings_Team): Tournament_TournamentSettings_Team;
    internalBinaryWrite(message: Tournament_TournamentSettings_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings.Team
 */
interface Tournament_TournamentSettings_Team {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings.Team
 */
declare const Tournament_TournamentSettings_Team: Tournament_TournamentSettings_Team$Type;
declare class State$Type extends MessageType<State> {
    constructor();
    create(value?: PartialMessage<State>): State;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: State): State;
    internalBinaryWrite(message: State, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.State
 */
interface State {
    /**
     * @generated from protobuf field: repeated proto.models.Tournament tournaments = 1;
     */
    tournaments: Tournament[];
    /**
     * @generated from protobuf field: repeated proto.models.CoreServer known_servers = 2;
     */
    knownServers: CoreServer[];
}
/**
 * @generated MessageType for protobuf message proto.models.State
 */
declare const State: State$Type;
declare class LeaderboardEntry$Type extends MessageType<LeaderboardEntry> {
    constructor();
    create(value?: PartialMessage<LeaderboardEntry>): LeaderboardEntry;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaderboardEntry): LeaderboardEntry;
    internalBinaryWrite(message: LeaderboardEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.LeaderboardEntry
 */
interface LeaderboardEntry {
    /**
     * @generated from protobuf field: string event_id = 1;
     */
    eventId: string;
    /**
     * @generated from protobuf field: string map_id = 2;
     */
    mapId: string;
    /**
     * @generated from protobuf field: string platform_id = 3;
     */
    platformId: string;
    /**
     * @generated from protobuf field: string username = 4;
     */
    username: string;
    /**
     * @generated from protobuf field: int32 multiplied_score = 5;
     */
    multipliedScore: number;
    /**
     * @generated from protobuf field: int32 modified_score = 6;
     */
    modifiedScore: number;
    /**
     * @generated from protobuf field: int32 max_possible_score = 7;
     */
    maxPossibleScore: number;
    /**
     * @generated from protobuf field: double accuracy = 8;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: int32 notes_missed = 9;
     */
    notesMissed: number;
    /**
     * @generated from protobuf field: int32 bad_cuts = 10;
     */
    badCuts: number;
    /**
     * @generated from protobuf field: int32 good_cuts = 11;
     */
    goodCuts: number;
    /**
     * @generated from protobuf field: int32 max_combo = 12;
     */
    maxCombo: number;
    /**
     * @generated from protobuf field: bool full_combo = 13;
     */
    fullCombo: boolean;
    /**
     * @generated from protobuf field: bool is_placeholder = 14;
     */
    isPlaceholder: boolean;
    /**
     * @generated from protobuf field: string color = 15;
     */
    color: string;
}
/**
 * @generated MessageType for protobuf message proto.models.LeaderboardEntry
 */
declare const LeaderboardEntry: LeaderboardEntry$Type;
declare class RealtimeScore$Type extends MessageType<RealtimeScore> {
    constructor();
    create(value?: PartialMessage<RealtimeScore>): RealtimeScore;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RealtimeScore): RealtimeScore;
    internalBinaryWrite(message: RealtimeScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.RealtimeScore
 */
interface RealtimeScore {
    /**
     * @generated from protobuf field: string user_guid = 1;
     */
    userGuid: string;
    /**
     * @generated from protobuf field: int32 score = 2;
     */
    score: number;
    /**
     * @generated from protobuf field: int32 score_with_modifiers = 3;
     */
    scoreWithModifiers: number;
    /**
     * @generated from protobuf field: int32 max_score = 4;
     */
    maxScore: number;
    /**
     * @generated from protobuf field: int32 max_score_with_modifiers = 5;
     */
    maxScoreWithModifiers: number;
    /**
     * @generated from protobuf field: int32 combo = 6;
     */
    combo: number;
    /**
     * @generated from protobuf field: float player_health = 7;
     */
    playerHealth: number;
    /**
     * @generated from protobuf field: float accuracy = 8;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: float song_position = 9;
     */
    songPosition: number;
    /**
     * @generated from protobuf field: int32 notes_missed = 10;
     */
    notesMissed: number;
    /**
     * @generated from protobuf field: int32 bad_cuts = 11;
     */
    badCuts: number;
    /**
     * @generated from protobuf field: int32 bomb_hits = 12;
     */
    bombHits: number;
    /**
     * @generated from protobuf field: int32 wall_hits = 13;
     */
    wallHits: number;
    /**
     * @generated from protobuf field: int32 max_combo = 14;
     */
    maxCombo: number;
    /**
     * @generated from protobuf field: proto.models.ScoreTrackerHand left_hand = 15;
     */
    leftHand?: ScoreTrackerHand;
    /**
     * @generated from protobuf field: proto.models.ScoreTrackerHand right_hand = 16;
     */
    rightHand?: ScoreTrackerHand;
}
/**
 * @generated MessageType for protobuf message proto.models.RealtimeScore
 */
declare const RealtimeScore: RealtimeScore$Type;
declare class ScoreTrackerHand$Type extends MessageType<ScoreTrackerHand> {
    constructor();
    create(value?: PartialMessage<ScoreTrackerHand>): ScoreTrackerHand;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreTrackerHand): ScoreTrackerHand;
    internalBinaryWrite(message: ScoreTrackerHand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.models.ScoreTrackerHand
 */
interface ScoreTrackerHand {
    /**
     * @generated from protobuf field: int32 hit = 1;
     */
    hit: number;
    /**
     * @generated from protobuf field: int32 miss = 2;
     */
    miss: number;
    /**
     * @generated from protobuf field: int32 bad_cut = 3;
     */
    badCut: number;
    /**
     * @generated from protobuf field: repeated float avg_cut = 4;
     */
    avgCut: number[];
}
/**
 * @generated MessageType for protobuf message proto.models.ScoreTrackerHand
 */
declare const ScoreTrackerHand: ScoreTrackerHand$Type;

declare class Event$Type extends MessageType<Event> {
    constructor();
    create(value?: PartialMessage<Event>): Event;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event;
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event
 */
interface Event {
    /**
     * @generated from protobuf oneof: changed_object
     */
    changedObject: {
        oneofKind: "userAdded";
        /**
         * @generated from protobuf field: proto.packets.Event.UserAdded user_added = 1;
         */
        userAdded: Event_UserAdded;
    } | {
        oneofKind: "userUpdated";
        /**
         * @generated from protobuf field: proto.packets.Event.UserUpdated user_updated = 2;
         */
        userUpdated: Event_UserUpdated;
    } | {
        oneofKind: "userLeft";
        /**
         * @generated from protobuf field: proto.packets.Event.UserLeft user_left = 3;
         */
        userLeft: Event_UserLeft;
    } | {
        oneofKind: "matchCreated";
        /**
         * @generated from protobuf field: proto.packets.Event.MatchCreated match_created = 6;
         */
        matchCreated: Event_MatchCreated;
    } | {
        oneofKind: "matchUpdated";
        /**
         * @generated from protobuf field: proto.packets.Event.MatchUpdated match_updated = 7;
         */
        matchUpdated: Event_MatchUpdated;
    } | {
        oneofKind: "matchDeleted";
        /**
         * @generated from protobuf field: proto.packets.Event.MatchDeleted match_deleted = 8;
         */
        matchDeleted: Event_MatchDeleted;
    } | {
        oneofKind: "qualifierCreated";
        /**
         * @generated from protobuf field: proto.packets.Event.QualifierCreated qualifier_created = 9;
         */
        qualifierCreated: Event_QualifierCreated;
    } | {
        oneofKind: "qualifierUpdated";
        /**
         * @generated from protobuf field: proto.packets.Event.QualifierUpdated qualifier_updated = 10;
         */
        qualifierUpdated: Event_QualifierUpdated;
    } | {
        oneofKind: "qualifierDeleted";
        /**
         * @generated from protobuf field: proto.packets.Event.QualifierDeleted qualifier_deleted = 11;
         */
        qualifierDeleted: Event_QualifierDeleted;
    } | {
        oneofKind: "tournamentCreated";
        /**
         * @generated from protobuf field: proto.packets.Event.TournamentCreated tournament_created = 12;
         */
        tournamentCreated: Event_TournamentCreated;
    } | {
        oneofKind: "tournamentUpdated";
        /**
         * @generated from protobuf field: proto.packets.Event.TournamentUpdated tournament_updated = 13;
         */
        tournamentUpdated: Event_TournamentUpdated;
    } | {
        oneofKind: "tournamentDeleted";
        /**
         * @generated from protobuf field: proto.packets.Event.TournamentDeleted tournament_deleted = 14;
         */
        tournamentDeleted: Event_TournamentDeleted;
    } | {
        oneofKind: "serverAdded";
        /**
         * @generated from protobuf field: proto.packets.Event.ServerAdded server_added = 15;
         */
        serverAdded: Event_ServerAdded;
    } | {
        oneofKind: "serverDeleted";
        /**
         * @generated from protobuf field: proto.packets.Event.ServerDeleted server_deleted = 16;
         */
        serverDeleted: Event_ServerDeleted;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Event
 */
declare const Event: Event$Type;
declare class Event_UserAdded$Type extends MessageType<Event_UserAdded> {
    constructor();
    create(value?: PartialMessage<Event_UserAdded>): Event_UserAdded;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserAdded): Event_UserAdded;
    internalBinaryWrite(message: Event_UserAdded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.UserAdded
 */
interface Event_UserAdded {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.User user = 2;
     */
    user?: User;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.UserAdded
 */
declare const Event_UserAdded: Event_UserAdded$Type;
declare class Event_UserUpdated$Type extends MessageType<Event_UserUpdated> {
    constructor();
    create(value?: PartialMessage<Event_UserUpdated>): Event_UserUpdated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserUpdated): Event_UserUpdated;
    internalBinaryWrite(message: Event_UserUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.UserUpdated
 */
interface Event_UserUpdated {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.User user = 2;
     */
    user?: User;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.UserUpdated
 */
declare const Event_UserUpdated: Event_UserUpdated$Type;
declare class Event_UserLeft$Type extends MessageType<Event_UserLeft> {
    constructor();
    create(value?: PartialMessage<Event_UserLeft>): Event_UserLeft;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_UserLeft): Event_UserLeft;
    internalBinaryWrite(message: Event_UserLeft, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.UserLeft
 */
interface Event_UserLeft {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.User user = 2;
     */
    user?: User;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.UserLeft
 */
declare const Event_UserLeft: Event_UserLeft$Type;
declare class Event_MatchCreated$Type extends MessageType<Event_MatchCreated> {
    constructor();
    create(value?: PartialMessage<Event_MatchCreated>): Event_MatchCreated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchCreated): Event_MatchCreated;
    internalBinaryWrite(message: Event_MatchCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.MatchCreated
 */
interface Event_MatchCreated {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.MatchCreated
 */
declare const Event_MatchCreated: Event_MatchCreated$Type;
declare class Event_MatchUpdated$Type extends MessageType<Event_MatchUpdated> {
    constructor();
    create(value?: PartialMessage<Event_MatchUpdated>): Event_MatchUpdated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchUpdated): Event_MatchUpdated;
    internalBinaryWrite(message: Event_MatchUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.MatchUpdated
 */
interface Event_MatchUpdated {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.MatchUpdated
 */
declare const Event_MatchUpdated: Event_MatchUpdated$Type;
declare class Event_MatchDeleted$Type extends MessageType<Event_MatchDeleted> {
    constructor();
    create(value?: PartialMessage<Event_MatchDeleted>): Event_MatchDeleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_MatchDeleted): Event_MatchDeleted;
    internalBinaryWrite(message: Event_MatchDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.MatchDeleted
 */
interface Event_MatchDeleted {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.MatchDeleted
 */
declare const Event_MatchDeleted: Event_MatchDeleted$Type;
declare class Event_QualifierCreated$Type extends MessageType<Event_QualifierCreated> {
    constructor();
    create(value?: PartialMessage<Event_QualifierCreated>): Event_QualifierCreated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierCreated): Event_QualifierCreated;
    internalBinaryWrite(message: Event_QualifierCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.QualifierCreated
 */
interface Event_QualifierCreated {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 2;
     */
    event?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.QualifierCreated
 */
declare const Event_QualifierCreated: Event_QualifierCreated$Type;
declare class Event_QualifierUpdated$Type extends MessageType<Event_QualifierUpdated> {
    constructor();
    create(value?: PartialMessage<Event_QualifierUpdated>): Event_QualifierUpdated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierUpdated): Event_QualifierUpdated;
    internalBinaryWrite(message: Event_QualifierUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.QualifierUpdated
 */
interface Event_QualifierUpdated {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 2;
     */
    event?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.QualifierUpdated
 */
declare const Event_QualifierUpdated: Event_QualifierUpdated$Type;
declare class Event_QualifierDeleted$Type extends MessageType<Event_QualifierDeleted> {
    constructor();
    create(value?: PartialMessage<Event_QualifierDeleted>): Event_QualifierDeleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_QualifierDeleted): Event_QualifierDeleted;
    internalBinaryWrite(message: Event_QualifierDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.QualifierDeleted
 */
interface Event_QualifierDeleted {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 2;
     */
    event?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.QualifierDeleted
 */
declare const Event_QualifierDeleted: Event_QualifierDeleted$Type;
declare class Event_TournamentCreated$Type extends MessageType<Event_TournamentCreated> {
    constructor();
    create(value?: PartialMessage<Event_TournamentCreated>): Event_TournamentCreated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_TournamentCreated): Event_TournamentCreated;
    internalBinaryWrite(message: Event_TournamentCreated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.TournamentCreated
 */
interface Event_TournamentCreated {
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 1;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.TournamentCreated
 */
declare const Event_TournamentCreated: Event_TournamentCreated$Type;
declare class Event_TournamentUpdated$Type extends MessageType<Event_TournamentUpdated> {
    constructor();
    create(value?: PartialMessage<Event_TournamentUpdated>): Event_TournamentUpdated;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_TournamentUpdated): Event_TournamentUpdated;
    internalBinaryWrite(message: Event_TournamentUpdated, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.TournamentUpdated
 */
interface Event_TournamentUpdated {
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 1;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.TournamentUpdated
 */
declare const Event_TournamentUpdated: Event_TournamentUpdated$Type;
declare class Event_TournamentDeleted$Type extends MessageType<Event_TournamentDeleted> {
    constructor();
    create(value?: PartialMessage<Event_TournamentDeleted>): Event_TournamentDeleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_TournamentDeleted): Event_TournamentDeleted;
    internalBinaryWrite(message: Event_TournamentDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.TournamentDeleted
 */
interface Event_TournamentDeleted {
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 1;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.TournamentDeleted
 */
declare const Event_TournamentDeleted: Event_TournamentDeleted$Type;
declare class Event_ServerAdded$Type extends MessageType<Event_ServerAdded> {
    constructor();
    create(value?: PartialMessage<Event_ServerAdded>): Event_ServerAdded;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_ServerAdded): Event_ServerAdded;
    internalBinaryWrite(message: Event_ServerAdded, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.ServerAdded
 */
interface Event_ServerAdded {
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 1;
     */
    server?: CoreServer;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.ServerAdded
 */
declare const Event_ServerAdded: Event_ServerAdded$Type;
declare class Event_ServerDeleted$Type extends MessageType<Event_ServerDeleted> {
    constructor();
    create(value?: PartialMessage<Event_ServerDeleted>): Event_ServerDeleted;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event_ServerDeleted): Event_ServerDeleted;
    internalBinaryWrite(message: Event_ServerDeleted, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Event.ServerDeleted
 */
interface Event_ServerDeleted {
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 1;
     */
    server?: CoreServer;
}
/**
 * @generated MessageType for protobuf message proto.packets.Event.ServerDeleted
 */
declare const Event_ServerDeleted: Event_ServerDeleted$Type;

/**
 * @generated from protobuf enum proto.packets.Response.Connect.ConnectFailReason
 */
declare enum Response_Connect_ConnectFailReason {
    /**
     * @generated from protobuf enum value: IncorrectVersion = 0;
     */
    IncorrectVersion = 0
}
/**
 * @generated from protobuf enum proto.packets.Response.Join.JoinFailReason
 */
declare enum Response_Join_JoinFailReason {
    /**
     * @generated from protobuf enum value: IncorrectPassword = 0;
     */
    IncorrectPassword = 0
}
/**
 * @generated from protobuf enum proto.packets.Response.ResponseType
 */
declare enum Response_ResponseType {
    /**
     * @generated from protobuf enum value: Fail = 0;
     */
    Fail = 0,
    /**
     * @generated from protobuf enum value: Success = 1;
     */
    Success = 1
}
declare class Response$Type extends MessageType<Response> {
    constructor();
    create(value?: PartialMessage<Response>): Response;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response): Response;
    internalBinaryWrite(message: Response, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * ---- Responses ---- //
 *
 * @generated from protobuf message proto.packets.Response
 */
interface Response {
    /**
     * @generated from protobuf field: proto.packets.Response.ResponseType type = 1;
     */
    type: Response_ResponseType;
    /**
     * @generated from protobuf field: string responding_to_packet_id = 2;
     */
    respondingToPacketId: string;
    /**
     * @generated from protobuf oneof: details
     */
    details: {
        oneofKind: "updateUser";
        /**
         * @generated from protobuf field: proto.packets.Response.UpdateUser update_user = 3;
         */
        updateUser: Response_UpdateUser;
    } | {
        oneofKind: "createMatch";
        /**
         * @generated from protobuf field: proto.packets.Response.CreateMatch create_match = 4;
         */
        createMatch: Response_CreateMatch;
    } | {
        oneofKind: "updateMatch";
        /**
         * @generated from protobuf field: proto.packets.Response.UpdateMatch update_match = 5;
         */
        updateMatch: Response_UpdateMatch;
    } | {
        oneofKind: "deleteMatch";
        /**
         * @generated from protobuf field: proto.packets.Response.DeleteMatch delete_match = 6;
         */
        deleteMatch: Response_DeleteMatch;
    } | {
        oneofKind: "createQualifierEvent";
        /**
         * @generated from protobuf field: proto.packets.Response.CreateQualifierEvent create_qualifier_event = 7;
         */
        createQualifierEvent: Response_CreateQualifierEvent;
    } | {
        oneofKind: "updateQualifierEvent";
        /**
         * @generated from protobuf field: proto.packets.Response.UpdateQualifierEvent update_qualifier_event = 8;
         */
        updateQualifierEvent: Response_UpdateQualifierEvent;
    } | {
        oneofKind: "deleteQualifierEvent";
        /**
         * @generated from protobuf field: proto.packets.Response.DeleteQualifierEvent delete_qualifier_event = 9;
         */
        deleteQualifierEvent: Response_DeleteQualifierEvent;
    } | {
        oneofKind: "addAuthorizedUser";
        /**
         * @generated from protobuf field: proto.packets.Response.AddAuthorizedUser add_authorized_user = 21;
         */
        addAuthorizedUser: Response_AddAuthorizedUser;
    } | {
        oneofKind: "updateAuthorizedUser";
        /**
         * @generated from protobuf field: proto.packets.Response.UpdateAuthorizedUser update_authorized_user = 22;
         */
        updateAuthorizedUser: Response_UpdateAuthorizedUser;
    } | {
        oneofKind: "removeAuthorizedUser";
        /**
         * @generated from protobuf field: proto.packets.Response.RemoveAuthorizedUser remove_authorized_user = 23;
         */
        removeAuthorizedUser: Response_RemoveAuthorizedUser;
    } | {
        oneofKind: "getAuthorizedUsers";
        /**
         * @generated from protobuf field: proto.packets.Response.GetAuthorizedUsers get_authorized_users = 24;
         */
        getAuthorizedUsers: Response_GetAuthorizedUsers;
    } | {
        oneofKind: "getDiscordInfo";
        /**
         * @generated from protobuf field: proto.packets.Response.GetDiscordInfo get_discord_info = 25;
         */
        getDiscordInfo: Response_GetDiscordInfo;
    } | {
        oneofKind: "createTournament";
        /**
         * @generated from protobuf field: proto.packets.Response.CreateTournament create_tournament = 10;
         */
        createTournament: Response_CreateTournament;
    } | {
        oneofKind: "updateTournament";
        /**
         * @generated from protobuf field: proto.packets.Response.UpdateTournament update_tournament = 11;
         */
        updateTournament: Response_UpdateTournament;
    } | {
        oneofKind: "deleteTournament";
        /**
         * @generated from protobuf field: proto.packets.Response.DeleteTournament delete_tournament = 12;
         */
        deleteTournament: Response_DeleteTournament;
    } | {
        oneofKind: "addServer";
        /**
         * @generated from protobuf field: proto.packets.Response.AddServer add_server = 13;
         */
        addServer: Response_AddServer;
    } | {
        oneofKind: "connect";
        /**
         * @generated from protobuf field: proto.packets.Response.Connect connect = 14;
         */
        connect: Response_Connect;
    } | {
        oneofKind: "join";
        /**
         * @generated from protobuf field: proto.packets.Response.Join join = 15;
         */
        join: Response_Join;
    } | {
        oneofKind: "leaderboardEntries";
        /**
         * @generated from protobuf field: proto.packets.Response.LeaderboardEntries leaderboard_entries = 16;
         */
        leaderboardEntries: Response_LeaderboardEntries;
    } | {
        oneofKind: "loadSong";
        /**
         * @generated from protobuf field: proto.packets.Response.LoadSong load_song = 17;
         */
        loadSong: Response_LoadSong;
    } | {
        oneofKind: "preloadImageForStreamSync";
        /**
         * @generated from protobuf field: proto.packets.Response.PreloadImageForStreamSync preload_image_for_stream_sync = 18;
         */
        preloadImageForStreamSync: Response_PreloadImageForStreamSync;
    } | {
        oneofKind: "showPrompt";
        /**
         * @generated from protobuf field: proto.packets.Response.ShowPrompt show_prompt = 19;
         */
        showPrompt: Response_ShowPrompt;
    } | {
        oneofKind: "remainingAttempts";
        /**
         * @generated from protobuf field: proto.packets.Response.RemainingAttempts remaining_attempts = 20;
         */
        remainingAttempts: Response_RemainingAttempts;
    } | {
        oneofKind: "getBotTokensForUser";
        /**
         * @generated from protobuf field: proto.packets.Response.GetBotTokensForUser get_bot_tokens_for_user = 26;
         */
        getBotTokensForUser: Response_GetBotTokensForUser;
    } | {
        oneofKind: "generateBotToken";
        /**
         * @generated from protobuf field: proto.packets.Response.GenerateBotToken generate_bot_token = 27;
         */
        generateBotToken: Response_GenerateBotToken;
    } | {
        oneofKind: "revokeBotToken";
        /**
         * @generated from protobuf field: proto.packets.Response.RevokeBotToken revoke_bot_token = 28;
         */
        revokeBotToken: Response_RevokeBotToken;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Response
 */
declare const Response: Response$Type;
declare class Response_UpdateUser$Type extends MessageType<Response_UpdateUser> {
    constructor();
    create(value?: PartialMessage<Response_UpdateUser>): Response_UpdateUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_UpdateUser): Response_UpdateUser;
    internalBinaryWrite(message: Response_UpdateUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * --- State Update Responses ---//
 *
 * @generated from protobuf message proto.packets.Response.UpdateUser
 */
interface Response_UpdateUser {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.User user = 2;
     */
    user?: User;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.UpdateUser
 */
declare const Response_UpdateUser: Response_UpdateUser$Type;
declare class Response_CreateMatch$Type extends MessageType<Response_CreateMatch> {
    constructor();
    create(value?: PartialMessage<Response_CreateMatch>): Response_CreateMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_CreateMatch): Response_CreateMatch;
    internalBinaryWrite(message: Response_CreateMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.CreateMatch
 */
interface Response_CreateMatch {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.CreateMatch
 */
declare const Response_CreateMatch: Response_CreateMatch$Type;
declare class Response_UpdateMatch$Type extends MessageType<Response_UpdateMatch> {
    constructor();
    create(value?: PartialMessage<Response_UpdateMatch>): Response_UpdateMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_UpdateMatch): Response_UpdateMatch;
    internalBinaryWrite(message: Response_UpdateMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.UpdateMatch
 */
interface Response_UpdateMatch {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.UpdateMatch
 */
declare const Response_UpdateMatch: Response_UpdateMatch$Type;
declare class Response_DeleteMatch$Type extends MessageType<Response_DeleteMatch> {
    constructor();
    create(value?: PartialMessage<Response_DeleteMatch>): Response_DeleteMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_DeleteMatch): Response_DeleteMatch;
    internalBinaryWrite(message: Response_DeleteMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.DeleteMatch
 */
interface Response_DeleteMatch {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.DeleteMatch
 */
declare const Response_DeleteMatch: Response_DeleteMatch$Type;
declare class Response_CreateQualifierEvent$Type extends MessageType<Response_CreateQualifierEvent> {
    constructor();
    create(value?: PartialMessage<Response_CreateQualifierEvent>): Response_CreateQualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_CreateQualifierEvent): Response_CreateQualifierEvent;
    internalBinaryWrite(message: Response_CreateQualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.CreateQualifierEvent
 */
interface Response_CreateQualifierEvent {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent qualifier = 2;
     */
    qualifier?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.CreateQualifierEvent
 */
declare const Response_CreateQualifierEvent: Response_CreateQualifierEvent$Type;
declare class Response_UpdateQualifierEvent$Type extends MessageType<Response_UpdateQualifierEvent> {
    constructor();
    create(value?: PartialMessage<Response_UpdateQualifierEvent>): Response_UpdateQualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_UpdateQualifierEvent): Response_UpdateQualifierEvent;
    internalBinaryWrite(message: Response_UpdateQualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.UpdateQualifierEvent
 */
interface Response_UpdateQualifierEvent {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent qualifier = 2;
     */
    qualifier?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.UpdateQualifierEvent
 */
declare const Response_UpdateQualifierEvent: Response_UpdateQualifierEvent$Type;
declare class Response_DeleteQualifierEvent$Type extends MessageType<Response_DeleteQualifierEvent> {
    constructor();
    create(value?: PartialMessage<Response_DeleteQualifierEvent>): Response_DeleteQualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_DeleteQualifierEvent): Response_DeleteQualifierEvent;
    internalBinaryWrite(message: Response_DeleteQualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.DeleteQualifierEvent
 */
interface Response_DeleteQualifierEvent {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent qualifier = 2;
     */
    qualifier?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.DeleteQualifierEvent
 */
declare const Response_DeleteQualifierEvent: Response_DeleteQualifierEvent$Type;
declare class Response_AddAuthorizedUser$Type extends MessageType<Response_AddAuthorizedUser> {
    constructor();
    create(value?: PartialMessage<Response_AddAuthorizedUser>): Response_AddAuthorizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_AddAuthorizedUser): Response_AddAuthorizedUser;
    internalBinaryWrite(message: Response_AddAuthorizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.AddAuthorizedUser
 */
interface Response_AddAuthorizedUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission_flags = 3;
     */
    permissionFlags: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.AddAuthorizedUser
 */
declare const Response_AddAuthorizedUser: Response_AddAuthorizedUser$Type;
declare class Response_UpdateAuthorizedUser$Type extends MessageType<Response_UpdateAuthorizedUser> {
    constructor();
    create(value?: PartialMessage<Response_UpdateAuthorizedUser>): Response_UpdateAuthorizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_UpdateAuthorizedUser): Response_UpdateAuthorizedUser;
    internalBinaryWrite(message: Response_UpdateAuthorizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.UpdateAuthorizedUser
 */
interface Response_UpdateAuthorizedUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission_flags = 3;
     */
    permissionFlags: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.UpdateAuthorizedUser
 */
declare const Response_UpdateAuthorizedUser: Response_UpdateAuthorizedUser$Type;
declare class Response_RemoveAuthorizedUser$Type extends MessageType<Response_RemoveAuthorizedUser> {
    constructor();
    create(value?: PartialMessage<Response_RemoveAuthorizedUser>): Response_RemoveAuthorizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_RemoveAuthorizedUser): Response_RemoveAuthorizedUser;
    internalBinaryWrite(message: Response_RemoveAuthorizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.RemoveAuthorizedUser
 */
interface Response_RemoveAuthorizedUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission_flags = 3;
     */
    permissionFlags: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.RemoveAuthorizedUser
 */
declare const Response_RemoveAuthorizedUser: Response_RemoveAuthorizedUser$Type;
declare class Response_GetAuthorizedUsers$Type extends MessageType<Response_GetAuthorizedUsers> {
    constructor();
    create(value?: PartialMessage<Response_GetAuthorizedUsers>): Response_GetAuthorizedUsers;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GetAuthorizedUsers): Response_GetAuthorizedUsers;
    internalBinaryWrite(message: Response_GetAuthorizedUsers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GetAuthorizedUsers
 */
interface Response_GetAuthorizedUsers {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: repeated proto.packets.Response.GetAuthorizedUsers.AuthroizedUser authorized_users = 2;
     */
    authorizedUsers: Response_GetAuthorizedUsers_AuthroizedUser[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GetAuthorizedUsers
 */
declare const Response_GetAuthorizedUsers: Response_GetAuthorizedUsers$Type;
declare class Response_GetAuthorizedUsers_AuthroizedUser$Type extends MessageType<Response_GetAuthorizedUsers_AuthroizedUser> {
    constructor();
    create(value?: PartialMessage<Response_GetAuthorizedUsers_AuthroizedUser>): Response_GetAuthorizedUsers_AuthroizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GetAuthorizedUsers_AuthroizedUser): Response_GetAuthorizedUsers_AuthroizedUser;
    internalBinaryWrite(message: Response_GetAuthorizedUsers_AuthroizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GetAuthorizedUsers.AuthroizedUser
 */
interface Response_GetAuthorizedUsers_AuthroizedUser {
    /**
     * @generated from protobuf field: string discord_id = 1;
     */
    discordId: string;
    /**
     * @generated from protobuf field: string discord_username = 2;
     */
    discordUsername: string;
    /**
     * @generated from protobuf field: string discord_avatar_url = 3;
     */
    discordAvatarUrl: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission = 4;
     */
    permission: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GetAuthorizedUsers.AuthroizedUser
 */
declare const Response_GetAuthorizedUsers_AuthroizedUser: Response_GetAuthorizedUsers_AuthroizedUser$Type;
declare class Response_GetDiscordInfo$Type extends MessageType<Response_GetDiscordInfo> {
    constructor();
    create(value?: PartialMessage<Response_GetDiscordInfo>): Response_GetDiscordInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GetDiscordInfo): Response_GetDiscordInfo;
    internalBinaryWrite(message: Response_GetDiscordInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GetDiscordInfo
 */
interface Response_GetDiscordInfo {
    /**
     * @generated from protobuf field: string discord_id = 1;
     */
    discordId: string;
    /**
     * @generated from protobuf field: string discord_username = 2;
     */
    discordUsername: string;
    /**
     * @generated from protobuf field: string discord_avatar_url = 3;
     */
    discordAvatarUrl: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GetDiscordInfo
 */
declare const Response_GetDiscordInfo: Response_GetDiscordInfo$Type;
declare class Response_CreateTournament$Type extends MessageType<Response_CreateTournament> {
    constructor();
    create(value?: PartialMessage<Response_CreateTournament>): Response_CreateTournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_CreateTournament): Response_CreateTournament;
    internalBinaryWrite(message: Response_CreateTournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.CreateTournament
 */
interface Response_CreateTournament {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 2;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.CreateTournament
 */
declare const Response_CreateTournament: Response_CreateTournament$Type;
declare class Response_UpdateTournament$Type extends MessageType<Response_UpdateTournament> {
    constructor();
    create(value?: PartialMessage<Response_UpdateTournament>): Response_UpdateTournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_UpdateTournament): Response_UpdateTournament;
    internalBinaryWrite(message: Response_UpdateTournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.UpdateTournament
 */
interface Response_UpdateTournament {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 2;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.UpdateTournament
 */
declare const Response_UpdateTournament: Response_UpdateTournament$Type;
declare class Response_DeleteTournament$Type extends MessageType<Response_DeleteTournament> {
    constructor();
    create(value?: PartialMessage<Response_DeleteTournament>): Response_DeleteTournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_DeleteTournament): Response_DeleteTournament;
    internalBinaryWrite(message: Response_DeleteTournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.DeleteTournament
 */
interface Response_DeleteTournament {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 2;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.DeleteTournament
 */
declare const Response_DeleteTournament: Response_DeleteTournament$Type;
declare class Response_AddServer$Type extends MessageType<Response_AddServer> {
    constructor();
    create(value?: PartialMessage<Response_AddServer>): Response_AddServer;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_AddServer): Response_AddServer;
    internalBinaryWrite(message: Response_AddServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.AddServer
 */
interface Response_AddServer {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 2;
     */
    server?: CoreServer;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.AddServer
 */
declare const Response_AddServer: Response_AddServer$Type;
declare class Response_Connect$Type extends MessageType<Response_Connect> {
    constructor();
    create(value?: PartialMessage<Response_Connect>): Response_Connect;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_Connect): Response_Connect;
    internalBinaryWrite(message: Response_Connect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Other Responses --/
 *
 * @generated from protobuf message proto.packets.Response.Connect
 */
interface Response_Connect {
    /**
     * @generated from protobuf field: proto.models.State state = 1;
     */
    state?: State;
    /**
     * @generated from protobuf field: int32 server_version = 2;
     */
    serverVersion: number;
    /**
     * @generated from protobuf field: string message = 3;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.packets.Response.Connect.ConnectFailReason reason = 4;
     */
    reason: Response_Connect_ConnectFailReason;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.Connect
 */
declare const Response_Connect: Response_Connect$Type;
declare class Response_Join$Type extends MessageType<Response_Join> {
    constructor();
    create(value?: PartialMessage<Response_Join>): Response_Join;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_Join): Response_Join;
    internalBinaryWrite(message: Response_Join, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.Join
 */
interface Response_Join {
    /**
     * @generated from protobuf field: proto.models.State state = 1;
     */
    state?: State;
    /**
     * @generated from protobuf field: string self_guid = 2;
     */
    selfGuid: string;
    /**
     * @generated from protobuf field: string tournament_id = 3;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string message = 4;
     */
    message: string;
    /**
     * @generated from protobuf field: proto.packets.Response.Join.JoinFailReason reason = 5;
     */
    reason: Response_Join_JoinFailReason;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.Join
 */
declare const Response_Join: Response_Join$Type;
declare class Response_LeaderboardEntries$Type extends MessageType<Response_LeaderboardEntries> {
    constructor();
    create(value?: PartialMessage<Response_LeaderboardEntries>): Response_LeaderboardEntries;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_LeaderboardEntries): Response_LeaderboardEntries;
    internalBinaryWrite(message: Response_LeaderboardEntries, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.LeaderboardEntries
 */
interface Response_LeaderboardEntries {
    /**
     * @generated from protobuf field: repeated proto.models.LeaderboardEntry scores = 1;
     */
    scores: LeaderboardEntry[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.LeaderboardEntries
 */
declare const Response_LeaderboardEntries: Response_LeaderboardEntries$Type;
declare class Response_LoadSong$Type extends MessageType<Response_LoadSong> {
    constructor();
    create(value?: PartialMessage<Response_LoadSong>): Response_LoadSong;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_LoadSong): Response_LoadSong;
    internalBinaryWrite(message: Response_LoadSong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.LoadSong
 */
interface Response_LoadSong {
    /**
     * @generated from protobuf field: string level_id = 1;
     */
    levelId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.LoadSong
 */
declare const Response_LoadSong: Response_LoadSong$Type;
declare class Response_PreloadImageForStreamSync$Type extends MessageType<Response_PreloadImageForStreamSync> {
    constructor();
    create(value?: PartialMessage<Response_PreloadImageForStreamSync>): Response_PreloadImageForStreamSync;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_PreloadImageForStreamSync): Response_PreloadImageForStreamSync;
    internalBinaryWrite(message: Response_PreloadImageForStreamSync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.PreloadImageForStreamSync
 */
interface Response_PreloadImageForStreamSync {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.PreloadImageForStreamSync
 */
declare const Response_PreloadImageForStreamSync: Response_PreloadImageForStreamSync$Type;
declare class Response_ShowPrompt$Type extends MessageType<Response_ShowPrompt> {
    constructor();
    create(value?: PartialMessage<Response_ShowPrompt>): Response_ShowPrompt;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_ShowPrompt): Response_ShowPrompt;
    internalBinaryWrite(message: Response_ShowPrompt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.ShowPrompt
 */
interface Response_ShowPrompt {
    /**
     * @generated from protobuf field: string value = 1;
     */
    value: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.ShowPrompt
 */
declare const Response_ShowPrompt: Response_ShowPrompt$Type;
declare class Response_RemainingAttempts$Type extends MessageType<Response_RemainingAttempts> {
    constructor();
    create(value?: PartialMessage<Response_RemainingAttempts>): Response_RemainingAttempts;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_RemainingAttempts): Response_RemainingAttempts;
    internalBinaryWrite(message: Response_RemainingAttempts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.RemainingAttempts
 */
interface Response_RemainingAttempts {
    /**
     * @generated from protobuf field: int32 remaining_attempts = 1;
     */
    remainingAttempts: number;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.RemainingAttempts
 */
declare const Response_RemainingAttempts: Response_RemainingAttempts$Type;
declare class Response_GetBotTokensForUser$Type extends MessageType<Response_GetBotTokensForUser> {
    constructor();
    create(value?: PartialMessage<Response_GetBotTokensForUser>): Response_GetBotTokensForUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GetBotTokensForUser): Response_GetBotTokensForUser;
    internalBinaryWrite(message: Response_GetBotTokensForUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GetBotTokensForUser
 */
interface Response_GetBotTokensForUser {
    /**
     * @generated from protobuf field: repeated proto.packets.Response.GetBotTokensForUser.BotUser bot_users = 1;
     */
    botUsers: Response_GetBotTokensForUser_BotUser[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GetBotTokensForUser
 */
declare const Response_GetBotTokensForUser: Response_GetBotTokensForUser$Type;
declare class Response_GetBotTokensForUser_BotUser$Type extends MessageType<Response_GetBotTokensForUser_BotUser> {
    constructor();
    create(value?: PartialMessage<Response_GetBotTokensForUser_BotUser>): Response_GetBotTokensForUser_BotUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GetBotTokensForUser_BotUser): Response_GetBotTokensForUser_BotUser;
    internalBinaryWrite(message: Response_GetBotTokensForUser_BotUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GetBotTokensForUser.BotUser
 */
interface Response_GetBotTokensForUser_BotUser {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string owner_discord_id = 3;
     */
    ownerDiscordId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GetBotTokensForUser.BotUser
 */
declare const Response_GetBotTokensForUser_BotUser: Response_GetBotTokensForUser_BotUser$Type;
declare class Response_GenerateBotToken$Type extends MessageType<Response_GenerateBotToken> {
    constructor();
    create(value?: PartialMessage<Response_GenerateBotToken>): Response_GenerateBotToken;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_GenerateBotToken): Response_GenerateBotToken;
    internalBinaryWrite(message: Response_GenerateBotToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.GenerateBotToken
 */
interface Response_GenerateBotToken {
    /**
     * @generated from protobuf field: string bot_token = 1;
     */
    botToken: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.GenerateBotToken
 */
declare const Response_GenerateBotToken: Response_GenerateBotToken$Type;
declare class Response_RevokeBotToken$Type extends MessageType<Response_RevokeBotToken> {
    constructor();
    create(value?: PartialMessage<Response_RevokeBotToken>): Response_RevokeBotToken;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Response_RevokeBotToken): Response_RevokeBotToken;
    internalBinaryWrite(message: Response_RevokeBotToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Response.RevokeBotToken
 */
interface Response_RevokeBotToken {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Response.RevokeBotToken
 */
declare const Response_RevokeBotToken: Response_RevokeBotToken$Type;

declare class Request$Type extends MessageType<Request> {
    constructor();
    create(value?: PartialMessage<Request>): Request;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request): Request;
    internalBinaryWrite(message: Request, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * ---- Requests (GET (or do?) something where you need a response!) ---- //
 *
 * @generated from protobuf message proto.packets.Request
 */
interface Request {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "updateUser";
        /**
         * @generated from protobuf field: proto.packets.Request.UpdateUser update_user = 1;
         */
        updateUser: Request_UpdateUser;
    } | {
        oneofKind: "createMatch";
        /**
         * @generated from protobuf field: proto.packets.Request.CreateMatch create_match = 2;
         */
        createMatch: Request_CreateMatch;
    } | {
        oneofKind: "addUserToMatch";
        /**
         * @generated from protobuf field: proto.packets.Request.AddUserToMatch add_user_to_match = 3;
         */
        addUserToMatch: Request_AddUserToMatch;
    } | {
        oneofKind: "removeUserFromMatch";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveUserFromMatch remove_user_from_match = 4;
         */
        removeUserFromMatch: Request_RemoveUserFromMatch;
    } | {
        oneofKind: "setMatchLeader";
        /**
         * @generated from protobuf field: proto.packets.Request.SetMatchLeader set_match_leader = 5;
         */
        setMatchLeader: Request_SetMatchLeader;
    } | {
        oneofKind: "setMatchMap";
        /**
         * @generated from protobuf field: proto.packets.Request.SetMatchMap set_match_map = 6;
         */
        setMatchMap: Request_SetMatchMap;
    } | {
        oneofKind: "deleteMatch";
        /**
         * @generated from protobuf field: proto.packets.Request.DeleteMatch delete_match = 7;
         */
        deleteMatch: Request_DeleteMatch;
    } | {
        oneofKind: "createQualifierEvent";
        /**
         * @generated from protobuf field: proto.packets.Request.CreateQualifierEvent create_qualifier_event = 8;
         */
        createQualifierEvent: Request_CreateQualifierEvent;
    } | {
        oneofKind: "setQualifierName";
        /**
         * @generated from protobuf field: proto.packets.Request.SetQualifierName set_qualifier_name = 9;
         */
        setQualifierName: Request_SetQualifierName;
    } | {
        oneofKind: "setQualifierInfoChannel";
        /**
         * @generated from protobuf field: proto.packets.Request.SetQualifierInfoChannel set_qualifier_info_channel = 10;
         */
        setQualifierInfoChannel: Request_SetQualifierInfoChannel;
    } | {
        oneofKind: "setQualifierImage";
        /**
         * @generated from protobuf field: proto.packets.Request.SetQualifierImage set_qualifier_image = 11;
         */
        setQualifierImage: Request_SetQualifierImage;
    } | {
        oneofKind: "setQualifierFlags";
        /**
         * @generated from protobuf field: proto.packets.Request.SetQualifierFlags set_qualifier_flags = 12;
         */
        setQualifierFlags: Request_SetQualifierFlags;
    } | {
        oneofKind: "setQualifierLeaderboardSort";
        /**
         * @generated from protobuf field: proto.packets.Request.SetQualifierLeaderboardSort set_qualifier_leaderboard_sort = 13;
         */
        setQualifierLeaderboardSort: Request_SetQualifierLeaderboardSort;
    } | {
        oneofKind: "addQualifierMaps";
        /**
         * @generated from protobuf field: proto.packets.Request.AddQualifierMaps add_qualifier_maps = 14;
         */
        addQualifierMaps: Request_AddQualifierMaps;
    } | {
        oneofKind: "updateQualifierMap";
        /**
         * @generated from protobuf field: proto.packets.Request.UpdateQualifierMap update_qualifier_map = 15;
         */
        updateQualifierMap: Request_UpdateQualifierMap;
    } | {
        oneofKind: "removeQualifierMap";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveQualifierMap remove_qualifier_map = 16;
         */
        removeQualifierMap: Request_RemoveQualifierMap;
    } | {
        oneofKind: "deleteQualifierEvent";
        /**
         * @generated from protobuf field: proto.packets.Request.DeleteQualifierEvent delete_qualifier_event = 17;
         */
        deleteQualifierEvent: Request_DeleteQualifierEvent;
    } | {
        oneofKind: "addAuthorizedUser";
        /**
         * @generated from protobuf field: proto.packets.Request.AddAuthorizedUser add_authorized_user = 48;
         */
        addAuthorizedUser: Request_AddAuthorizedUser;
    } | {
        oneofKind: "addAuthorizedUserPermission";
        /**
         * @generated from protobuf field: proto.packets.Request.AddAuthorizedUserPermission add_authorized_user_permission = 49;
         */
        addAuthorizedUserPermission: Request_AddAuthorizedUserPermission;
    } | {
        oneofKind: "removeAuthorizedUserPermission";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveAuthorizedUserPermission remove_authorized_user_permission = 50;
         */
        removeAuthorizedUserPermission: Request_RemoveAuthorizedUserPermission;
    } | {
        oneofKind: "removeAuthorizedUser";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveAuthorizedUser remove_authorized_user = 51;
         */
        removeAuthorizedUser: Request_RemoveAuthorizedUser;
    } | {
        oneofKind: "getAuthorizedUsers";
        /**
         * @generated from protobuf field: proto.packets.Request.GetAuthorizedUsers get_authorized_users = 52;
         */
        getAuthorizedUsers: Request_GetAuthorizedUsers;
    } | {
        oneofKind: "getDiscordInfo";
        /**
         * @generated from protobuf field: proto.packets.Request.GetDiscordInfo get_discord_info = 53;
         */
        getDiscordInfo: Request_GetDiscordInfo;
    } | {
        oneofKind: "createTournament";
        /**
         * @generated from protobuf field: proto.packets.Request.CreateTournament create_tournament = 18;
         */
        createTournament: Request_CreateTournament;
    } | {
        oneofKind: "setTournamentName";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentName set_tournament_name = 19;
         */
        setTournamentName: Request_SetTournamentName;
    } | {
        oneofKind: "setTournamentImage";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentImage set_tournament_image = 20;
         */
        setTournamentImage: Request_SetTournamentImage;
    } | {
        oneofKind: "setTournamentEnableTeams";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentEnableTeams set_tournament_enable_teams = 21;
         */
        setTournamentEnableTeams: Request_SetTournamentEnableTeams;
    } | {
        oneofKind: "setTournamentEnablePools";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentEnablePools set_tournament_enable_pools = 44;
         */
        setTournamentEnablePools: Request_SetTournamentEnablePools;
    } | {
        oneofKind: "setTournamentShowTournamentButton";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentShowTournamentButton set_tournament_show_tournament_button = 45;
         */
        setTournamentShowTournamentButton: Request_SetTournamentShowTournamentButton;
    } | {
        oneofKind: "setTournamentShowQualifierButton";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentShowQualifierButton set_tournament_show_qualifier_button = 46;
         */
        setTournamentShowQualifierButton: Request_SetTournamentShowQualifierButton;
    } | {
        oneofKind: "setTournamentAllowUnauthorizedView";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentAllowUnauthorizedView set_tournament_allow_unauthorized_view = 54;
         */
        setTournamentAllowUnauthorizedView: Request_SetTournamentAllowUnauthorizedView;
    } | {
        oneofKind: "setTournamentScoreUpdateFrequency";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentScoreUpdateFrequency set_tournament_score_update_frequency = 47;
         */
        setTournamentScoreUpdateFrequency: Request_SetTournamentScoreUpdateFrequency;
    } | {
        oneofKind: "setTournamentBannedMods";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentBannedMods set_tournament_banned_mods = 23;
         */
        setTournamentBannedMods: Request_SetTournamentBannedMods;
    } | {
        oneofKind: "addTournamentTeam";
        /**
         * @generated from protobuf field: proto.packets.Request.AddTournamentTeam add_tournament_team = 24;
         */
        addTournamentTeam: Request_AddTournamentTeam;
    } | {
        oneofKind: "setTournamentTeamName";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentTeamName set_tournament_team_name = 25;
         */
        setTournamentTeamName: Request_SetTournamentTeamName;
    } | {
        oneofKind: "setTournamentTeamImage";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentTeamImage set_tournament_team_image = 26;
         */
        setTournamentTeamImage: Request_SetTournamentTeamImage;
    } | {
        oneofKind: "removeTournamentTeam";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveTournamentTeam remove_tournament_team = 27;
         */
        removeTournamentTeam: Request_RemoveTournamentTeam;
    } | {
        oneofKind: "addTournamentPool";
        /**
         * @generated from protobuf field: proto.packets.Request.AddTournamentPool add_tournament_pool = 28;
         */
        addTournamentPool: Request_AddTournamentPool;
    } | {
        oneofKind: "setTournamentPoolName";
        /**
         * @generated from protobuf field: proto.packets.Request.SetTournamentPoolName set_tournament_pool_name = 29;
         */
        setTournamentPoolName: Request_SetTournamentPoolName;
    } | {
        oneofKind: "addTournamentPoolMaps";
        /**
         * @generated from protobuf field: proto.packets.Request.AddTournamentPoolMaps add_tournament_pool_maps = 30;
         */
        addTournamentPoolMaps: Request_AddTournamentPoolMaps;
    } | {
        oneofKind: "updateTournamentPoolMap";
        /**
         * @generated from protobuf field: proto.packets.Request.UpdateTournamentPoolMap update_tournament_pool_map = 31;
         */
        updateTournamentPoolMap: Request_UpdateTournamentPoolMap;
    } | {
        oneofKind: "removeTournamentPoolMap";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveTournamentPoolMap remove_tournament_pool_map = 32;
         */
        removeTournamentPoolMap: Request_RemoveTournamentPoolMap;
    } | {
        oneofKind: "removeTournamentPool";
        /**
         * @generated from protobuf field: proto.packets.Request.RemoveTournamentPool remove_tournament_pool = 33;
         */
        removeTournamentPool: Request_RemoveTournamentPool;
    } | {
        oneofKind: "deleteTournament";
        /**
         * @generated from protobuf field: proto.packets.Request.DeleteTournament delete_tournament = 34;
         */
        deleteTournament: Request_DeleteTournament;
    } | {
        oneofKind: "addServer";
        /**
         * @generated from protobuf field: proto.packets.Request.AddServer add_server = 35;
         */
        addServer: Request_AddServer;
    } | {
        oneofKind: "connect";
        /**
         * @generated from protobuf field: proto.packets.Request.Connect connect = 36;
         */
        connect: Request_Connect;
    } | {
        oneofKind: "join";
        /**
         * @generated from protobuf field: proto.packets.Request.Join join = 37;
         */
        join: Request_Join;
    } | {
        oneofKind: "qualifierScores";
        /**
         * @generated from protobuf field: proto.packets.Request.QualifierScores qualifier_scores = 38;
         */
        qualifierScores: Request_QualifierScores;
    } | {
        oneofKind: "submitQualifierScore";
        /**
         * @generated from protobuf field: proto.packets.Request.SubmitQualifierScore submit_qualifier_score = 39;
         */
        submitQualifierScore: Request_SubmitQualifierScore;
    } | {
        oneofKind: "loadSong";
        /**
         * @generated from protobuf field: proto.packets.Request.LoadSong load_song = 40;
         */
        loadSong: Request_LoadSong;
    } | {
        oneofKind: "preloadImageForStreamSync";
        /**
         * @generated from protobuf field: proto.packets.Request.PreloadImageForStreamSync preload_image_for_stream_sync = 41;
         */
        preloadImageForStreamSync: Request_PreloadImageForStreamSync;
    } | {
        oneofKind: "showPrompt";
        /**
         * @generated from protobuf field: proto.packets.Request.ShowPrompt show_prompt = 42;
         */
        showPrompt: Request_ShowPrompt;
    } | {
        oneofKind: "remainingAttempts";
        /**
         * @generated from protobuf field: proto.packets.Request.RemainingAttempts remaining_attempts = 43;
         */
        remainingAttempts: Request_RemainingAttempts;
    } | {
        oneofKind: "getBotTokensForUser";
        /**
         * @generated from protobuf field: proto.packets.Request.GetBotTokensForUser get_bot_tokens_for_user = 55;
         */
        getBotTokensForUser: Request_GetBotTokensForUser;
    } | {
        oneofKind: "generateBotToken";
        /**
         * @generated from protobuf field: proto.packets.Request.GenerateBotToken generate_bot_token = 56;
         */
        generateBotToken: Request_GenerateBotToken;
    } | {
        oneofKind: "revokeBotToken";
        /**
         * @generated from protobuf field: proto.packets.Request.RevokeBotToken revoke_bot_token = 57;
         */
        revokeBotToken: Request_RevokeBotToken;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Request
 */
declare const Request: Request$Type;
declare class Request_UpdateUser$Type extends MessageType<Request_UpdateUser> {
    constructor();
    create(value?: PartialMessage<Request_UpdateUser>): Request_UpdateUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_UpdateUser): Request_UpdateUser;
    internalBinaryWrite(message: Request_UpdateUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * --- State Update Requests ---//
 *
 * @generated from protobuf message proto.packets.Request.UpdateUser
 */
interface Request_UpdateUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.User user = 2;
     */
    user?: User;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.UpdateUser
 */
declare const Request_UpdateUser: Request_UpdateUser$Type;
declare class Request_CreateMatch$Type extends MessageType<Request_CreateMatch> {
    constructor();
    create(value?: PartialMessage<Request_CreateMatch>): Request_CreateMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_CreateMatch): Request_CreateMatch;
    internalBinaryWrite(message: Request_CreateMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Match -- //
 *
 * @generated from protobuf message proto.packets.Request.CreateMatch
 */
interface Request_CreateMatch {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Match match = 2;
     */
    match?: Match;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.CreateMatch
 */
declare const Request_CreateMatch: Request_CreateMatch$Type;
declare class Request_AddUserToMatch$Type extends MessageType<Request_AddUserToMatch> {
    constructor();
    create(value?: PartialMessage<Request_AddUserToMatch>): Request_AddUserToMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddUserToMatch): Request_AddUserToMatch;
    internalBinaryWrite(message: Request_AddUserToMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddUserToMatch
 */
interface Request_AddUserToMatch {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
    /**
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddUserToMatch
 */
declare const Request_AddUserToMatch: Request_AddUserToMatch$Type;
declare class Request_RemoveUserFromMatch$Type extends MessageType<Request_RemoveUserFromMatch> {
    constructor();
    create(value?: PartialMessage<Request_RemoveUserFromMatch>): Request_RemoveUserFromMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveUserFromMatch): Request_RemoveUserFromMatch;
    internalBinaryWrite(message: Request_RemoveUserFromMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveUserFromMatch
 */
interface Request_RemoveUserFromMatch {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
    /**
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveUserFromMatch
 */
declare const Request_RemoveUserFromMatch: Request_RemoveUserFromMatch$Type;
declare class Request_SetMatchLeader$Type extends MessageType<Request_SetMatchLeader> {
    constructor();
    create(value?: PartialMessage<Request_SetMatchLeader>): Request_SetMatchLeader;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetMatchLeader): Request_SetMatchLeader;
    internalBinaryWrite(message: Request_SetMatchLeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetMatchLeader
 */
interface Request_SetMatchLeader {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
    /**
     * @generated from protobuf field: string user_id = 3;
     */
    userId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetMatchLeader
 */
declare const Request_SetMatchLeader: Request_SetMatchLeader$Type;
declare class Request_SetMatchMap$Type extends MessageType<Request_SetMatchMap> {
    constructor();
    create(value?: PartialMessage<Request_SetMatchMap>): Request_SetMatchMap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetMatchMap): Request_SetMatchMap;
    internalBinaryWrite(message: Request_SetMatchMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetMatchMap
 */
interface Request_SetMatchMap {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
    /**
     * @generated from protobuf field: proto.models.Map map = 3;
     */
    map?: Map;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetMatchMap
 */
declare const Request_SetMatchMap: Request_SetMatchMap$Type;
declare class Request_DeleteMatch$Type extends MessageType<Request_DeleteMatch> {
    constructor();
    create(value?: PartialMessage<Request_DeleteMatch>): Request_DeleteMatch;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_DeleteMatch): Request_DeleteMatch;
    internalBinaryWrite(message: Request_DeleteMatch, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.DeleteMatch
 */
interface Request_DeleteMatch {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 2;
     */
    matchId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.DeleteMatch
 */
declare const Request_DeleteMatch: Request_DeleteMatch$Type;
declare class Request_CreateQualifierEvent$Type extends MessageType<Request_CreateQualifierEvent> {
    constructor();
    create(value?: PartialMessage<Request_CreateQualifierEvent>): Request_CreateQualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_CreateQualifierEvent): Request_CreateQualifierEvent;
    internalBinaryWrite(message: Request_CreateQualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Qualifiers -- //
 *
 * @generated from protobuf message proto.packets.Request.CreateQualifierEvent
 */
interface Request_CreateQualifierEvent {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent event = 2;
     */
    event?: QualifierEvent;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.CreateQualifierEvent
 */
declare const Request_CreateQualifierEvent: Request_CreateQualifierEvent$Type;
declare class Request_SetQualifierName$Type extends MessageType<Request_SetQualifierName> {
    constructor();
    create(value?: PartialMessage<Request_SetQualifierName>): Request_SetQualifierName;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetQualifierName): Request_SetQualifierName;
    internalBinaryWrite(message: Request_SetQualifierName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetQualifierName
 */
interface Request_SetQualifierName {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: string qualifier_name = 3;
     */
    qualifierName: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetQualifierName
 */
declare const Request_SetQualifierName: Request_SetQualifierName$Type;
declare class Request_SetQualifierImage$Type extends MessageType<Request_SetQualifierImage> {
    constructor();
    create(value?: PartialMessage<Request_SetQualifierImage>): Request_SetQualifierImage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetQualifierImage): Request_SetQualifierImage;
    internalBinaryWrite(message: Request_SetQualifierImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetQualifierImage
 */
interface Request_SetQualifierImage {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: bytes qualifier_image = 3;
     */
    qualifierImage: Uint8Array;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetQualifierImage
 */
declare const Request_SetQualifierImage: Request_SetQualifierImage$Type;
declare class Request_SetQualifierInfoChannel$Type extends MessageType<Request_SetQualifierInfoChannel> {
    constructor();
    create(value?: PartialMessage<Request_SetQualifierInfoChannel>): Request_SetQualifierInfoChannel;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetQualifierInfoChannel): Request_SetQualifierInfoChannel;
    internalBinaryWrite(message: Request_SetQualifierInfoChannel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetQualifierInfoChannel
 */
interface Request_SetQualifierInfoChannel {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: proto.discord.Channel info_channel = 3;
     */
    infoChannel?: Channel;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetQualifierInfoChannel
 */
declare const Request_SetQualifierInfoChannel: Request_SetQualifierInfoChannel$Type;
declare class Request_SetQualifierFlags$Type extends MessageType<Request_SetQualifierFlags> {
    constructor();
    create(value?: PartialMessage<Request_SetQualifierFlags>): Request_SetQualifierFlags;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetQualifierFlags): Request_SetQualifierFlags;
    internalBinaryWrite(message: Request_SetQualifierFlags, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetQualifierFlags
 */
interface Request_SetQualifierFlags {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.EventSettings qualifier_flags = 3;
     */
    qualifierFlags: QualifierEvent_EventSettings;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetQualifierFlags
 */
declare const Request_SetQualifierFlags: Request_SetQualifierFlags$Type;
declare class Request_SetQualifierLeaderboardSort$Type extends MessageType<Request_SetQualifierLeaderboardSort> {
    constructor();
    create(value?: PartialMessage<Request_SetQualifierLeaderboardSort>): Request_SetQualifierLeaderboardSort;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetQualifierLeaderboardSort): Request_SetQualifierLeaderboardSort;
    internalBinaryWrite(message: Request_SetQualifierLeaderboardSort, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetQualifierLeaderboardSort
 */
interface Request_SetQualifierLeaderboardSort {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.LeaderboardSort qualifier_leaderboard_sort = 3;
     */
    qualifierLeaderboardSort: QualifierEvent_LeaderboardSort;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetQualifierLeaderboardSort
 */
declare const Request_SetQualifierLeaderboardSort: Request_SetQualifierLeaderboardSort$Type;
declare class Request_AddQualifierMaps$Type extends MessageType<Request_AddQualifierMaps> {
    constructor();
    create(value?: PartialMessage<Request_AddQualifierMaps>): Request_AddQualifierMaps;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddQualifierMaps): Request_AddQualifierMaps;
    internalBinaryWrite(message: Request_AddQualifierMaps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddQualifierMaps
 */
interface Request_AddQualifierMaps {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: repeated proto.models.Map maps = 3;
     */
    maps: Map[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddQualifierMaps
 */
declare const Request_AddQualifierMaps: Request_AddQualifierMaps$Type;
declare class Request_UpdateQualifierMap$Type extends MessageType<Request_UpdateQualifierMap> {
    constructor();
    create(value?: PartialMessage<Request_UpdateQualifierMap>): Request_UpdateQualifierMap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_UpdateQualifierMap): Request_UpdateQualifierMap;
    internalBinaryWrite(message: Request_UpdateQualifierMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.UpdateQualifierMap
 */
interface Request_UpdateQualifierMap {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: proto.models.Map map = 3;
     */
    map?: Map;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.UpdateQualifierMap
 */
declare const Request_UpdateQualifierMap: Request_UpdateQualifierMap$Type;
declare class Request_RemoveQualifierMap$Type extends MessageType<Request_RemoveQualifierMap> {
    constructor();
    create(value?: PartialMessage<Request_RemoveQualifierMap>): Request_RemoveQualifierMap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveQualifierMap): Request_RemoveQualifierMap;
    internalBinaryWrite(message: Request_RemoveQualifierMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveQualifierMap
 */
interface Request_RemoveQualifierMap {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
    /**
     * @generated from protobuf field: string map_id = 3;
     */
    mapId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveQualifierMap
 */
declare const Request_RemoveQualifierMap: Request_RemoveQualifierMap$Type;
declare class Request_DeleteQualifierEvent$Type extends MessageType<Request_DeleteQualifierEvent> {
    constructor();
    create(value?: PartialMessage<Request_DeleteQualifierEvent>): Request_DeleteQualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_DeleteQualifierEvent): Request_DeleteQualifierEvent;
    internalBinaryWrite(message: Request_DeleteQualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.DeleteQualifierEvent
 */
interface Request_DeleteQualifierEvent {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string qualifier_id = 2;
     */
    qualifierId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.DeleteQualifierEvent
 */
declare const Request_DeleteQualifierEvent: Request_DeleteQualifierEvent$Type;
declare class Request_AddAuthorizedUser$Type extends MessageType<Request_AddAuthorizedUser> {
    constructor();
    create(value?: PartialMessage<Request_AddAuthorizedUser>): Request_AddAuthorizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddAuthorizedUser): Request_AddAuthorizedUser;
    internalBinaryWrite(message: Request_AddAuthorizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Tournament -- //
 *
 * @generated from protobuf message proto.packets.Request.AddAuthorizedUser
 */
interface Request_AddAuthorizedUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission_flags = 3;
     */
    permissionFlags: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddAuthorizedUser
 */
declare const Request_AddAuthorizedUser: Request_AddAuthorizedUser$Type;
declare class Request_AddAuthorizedUserPermission$Type extends MessageType<Request_AddAuthorizedUserPermission> {
    constructor();
    create(value?: PartialMessage<Request_AddAuthorizedUserPermission>): Request_AddAuthorizedUserPermission;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddAuthorizedUserPermission): Request_AddAuthorizedUserPermission;
    internalBinaryWrite(message: Request_AddAuthorizedUserPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddAuthorizedUserPermission
 */
interface Request_AddAuthorizedUserPermission {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission = 3;
     */
    permission: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddAuthorizedUserPermission
 */
declare const Request_AddAuthorizedUserPermission: Request_AddAuthorizedUserPermission$Type;
declare class Request_RemoveAuthorizedUserPermission$Type extends MessageType<Request_RemoveAuthorizedUserPermission> {
    constructor();
    create(value?: PartialMessage<Request_RemoveAuthorizedUserPermission>): Request_RemoveAuthorizedUserPermission;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveAuthorizedUserPermission): Request_RemoveAuthorizedUserPermission;
    internalBinaryWrite(message: Request_RemoveAuthorizedUserPermission, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveAuthorizedUserPermission
 */
interface Request_RemoveAuthorizedUserPermission {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
    /**
     * @generated from protobuf field: proto.models.Permissions permission = 3;
     */
    permission: Permissions;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveAuthorizedUserPermission
 */
declare const Request_RemoveAuthorizedUserPermission: Request_RemoveAuthorizedUserPermission$Type;
declare class Request_RemoveAuthorizedUser$Type extends MessageType<Request_RemoveAuthorizedUser> {
    constructor();
    create(value?: PartialMessage<Request_RemoveAuthorizedUser>): Request_RemoveAuthorizedUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveAuthorizedUser): Request_RemoveAuthorizedUser;
    internalBinaryWrite(message: Request_RemoveAuthorizedUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveAuthorizedUser
 */
interface Request_RemoveAuthorizedUser {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveAuthorizedUser
 */
declare const Request_RemoveAuthorizedUser: Request_RemoveAuthorizedUser$Type;
declare class Request_GetAuthorizedUsers$Type extends MessageType<Request_GetAuthorizedUsers> {
    constructor();
    create(value?: PartialMessage<Request_GetAuthorizedUsers>): Request_GetAuthorizedUsers;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_GetAuthorizedUsers): Request_GetAuthorizedUsers;
    internalBinaryWrite(message: Request_GetAuthorizedUsers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.GetAuthorizedUsers
 */
interface Request_GetAuthorizedUsers {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.GetAuthorizedUsers
 */
declare const Request_GetAuthorizedUsers: Request_GetAuthorizedUsers$Type;
declare class Request_GetDiscordInfo$Type extends MessageType<Request_GetDiscordInfo> {
    constructor();
    create(value?: PartialMessage<Request_GetDiscordInfo>): Request_GetDiscordInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_GetDiscordInfo): Request_GetDiscordInfo;
    internalBinaryWrite(message: Request_GetDiscordInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.GetDiscordInfo
 */
interface Request_GetDiscordInfo {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string discord_id = 2;
     */
    discordId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.GetDiscordInfo
 */
declare const Request_GetDiscordInfo: Request_GetDiscordInfo$Type;
declare class Request_CreateTournament$Type extends MessageType<Request_CreateTournament> {
    constructor();
    create(value?: PartialMessage<Request_CreateTournament>): Request_CreateTournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_CreateTournament): Request_CreateTournament;
    internalBinaryWrite(message: Request_CreateTournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.CreateTournament
 */
interface Request_CreateTournament {
    /**
     * @generated from protobuf field: proto.models.Tournament tournament = 1;
     */
    tournament?: Tournament;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.CreateTournament
 */
declare const Request_CreateTournament: Request_CreateTournament$Type;
declare class Request_SetTournamentName$Type extends MessageType<Request_SetTournamentName> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentName>): Request_SetTournamentName;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentName): Request_SetTournamentName;
    internalBinaryWrite(message: Request_SetTournamentName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentName
 */
interface Request_SetTournamentName {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string tournament_name = 2;
     */
    tournamentName: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentName
 */
declare const Request_SetTournamentName: Request_SetTournamentName$Type;
declare class Request_SetTournamentImage$Type extends MessageType<Request_SetTournamentImage> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentImage>): Request_SetTournamentImage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentImage): Request_SetTournamentImage;
    internalBinaryWrite(message: Request_SetTournamentImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentImage
 */
interface Request_SetTournamentImage {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bytes tournament_image = 2;
     */
    tournamentImage: Uint8Array;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentImage
 */
declare const Request_SetTournamentImage: Request_SetTournamentImage$Type;
declare class Request_SetTournamentEnableTeams$Type extends MessageType<Request_SetTournamentEnableTeams> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentEnableTeams>): Request_SetTournamentEnableTeams;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentEnableTeams): Request_SetTournamentEnableTeams;
    internalBinaryWrite(message: Request_SetTournamentEnableTeams, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentEnableTeams
 */
interface Request_SetTournamentEnableTeams {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bool enable_teams = 2;
     */
    enableTeams: boolean;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentEnableTeams
 */
declare const Request_SetTournamentEnableTeams: Request_SetTournamentEnableTeams$Type;
declare class Request_SetTournamentEnablePools$Type extends MessageType<Request_SetTournamentEnablePools> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentEnablePools>): Request_SetTournamentEnablePools;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentEnablePools): Request_SetTournamentEnablePools;
    internalBinaryWrite(message: Request_SetTournamentEnablePools, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentEnablePools
 */
interface Request_SetTournamentEnablePools {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bool enable_pools = 2;
     */
    enablePools: boolean;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentEnablePools
 */
declare const Request_SetTournamentEnablePools: Request_SetTournamentEnablePools$Type;
declare class Request_SetTournamentShowTournamentButton$Type extends MessageType<Request_SetTournamentShowTournamentButton> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentShowTournamentButton>): Request_SetTournamentShowTournamentButton;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentShowTournamentButton): Request_SetTournamentShowTournamentButton;
    internalBinaryWrite(message: Request_SetTournamentShowTournamentButton, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentShowTournamentButton
 */
interface Request_SetTournamentShowTournamentButton {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bool show_tournament_button = 2;
     */
    showTournamentButton: boolean;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentShowTournamentButton
 */
declare const Request_SetTournamentShowTournamentButton: Request_SetTournamentShowTournamentButton$Type;
declare class Request_SetTournamentShowQualifierButton$Type extends MessageType<Request_SetTournamentShowQualifierButton> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentShowQualifierButton>): Request_SetTournamentShowQualifierButton;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentShowQualifierButton): Request_SetTournamentShowQualifierButton;
    internalBinaryWrite(message: Request_SetTournamentShowQualifierButton, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentShowQualifierButton
 */
interface Request_SetTournamentShowQualifierButton {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bool show_qualifier_button = 2;
     */
    showQualifierButton: boolean;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentShowQualifierButton
 */
declare const Request_SetTournamentShowQualifierButton: Request_SetTournamentShowQualifierButton$Type;
declare class Request_SetTournamentAllowUnauthorizedView$Type extends MessageType<Request_SetTournamentAllowUnauthorizedView> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentAllowUnauthorizedView>): Request_SetTournamentAllowUnauthorizedView;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentAllowUnauthorizedView): Request_SetTournamentAllowUnauthorizedView;
    internalBinaryWrite(message: Request_SetTournamentAllowUnauthorizedView, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentAllowUnauthorizedView
 */
interface Request_SetTournamentAllowUnauthorizedView {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: bool allow_unauthorized_view = 2;
     */
    allowUnauthorizedView: boolean;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentAllowUnauthorizedView
 */
declare const Request_SetTournamentAllowUnauthorizedView: Request_SetTournamentAllowUnauthorizedView$Type;
declare class Request_SetTournamentScoreUpdateFrequency$Type extends MessageType<Request_SetTournamentScoreUpdateFrequency> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentScoreUpdateFrequency>): Request_SetTournamentScoreUpdateFrequency;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentScoreUpdateFrequency): Request_SetTournamentScoreUpdateFrequency;
    internalBinaryWrite(message: Request_SetTournamentScoreUpdateFrequency, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentScoreUpdateFrequency
 */
interface Request_SetTournamentScoreUpdateFrequency {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: int32 score_update_frequency = 2;
     */
    scoreUpdateFrequency: number;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentScoreUpdateFrequency
 */
declare const Request_SetTournamentScoreUpdateFrequency: Request_SetTournamentScoreUpdateFrequency$Type;
declare class Request_SetTournamentBannedMods$Type extends MessageType<Request_SetTournamentBannedMods> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentBannedMods>): Request_SetTournamentBannedMods;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentBannedMods): Request_SetTournamentBannedMods;
    internalBinaryWrite(message: Request_SetTournamentBannedMods, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentBannedMods
 */
interface Request_SetTournamentBannedMods {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: repeated string banned_mods = 2;
     */
    bannedMods: string[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentBannedMods
 */
declare const Request_SetTournamentBannedMods: Request_SetTournamentBannedMods$Type;
declare class Request_AddTournamentTeam$Type extends MessageType<Request_AddTournamentTeam> {
    constructor();
    create(value?: PartialMessage<Request_AddTournamentTeam>): Request_AddTournamentTeam;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddTournamentTeam): Request_AddTournamentTeam;
    internalBinaryWrite(message: Request_AddTournamentTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddTournamentTeam
 */
interface Request_AddTournamentTeam {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Tournament.TournamentSettings.Team team = 2;
     */
    team?: Tournament_TournamentSettings_Team;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddTournamentTeam
 */
declare const Request_AddTournamentTeam: Request_AddTournamentTeam$Type;
declare class Request_SetTournamentTeamName$Type extends MessageType<Request_SetTournamentTeamName> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentTeamName>): Request_SetTournamentTeamName;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentTeamName): Request_SetTournamentTeamName;
    internalBinaryWrite(message: Request_SetTournamentTeamName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentTeamName
 */
interface Request_SetTournamentTeamName {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string team_id = 2;
     */
    teamId: string;
    /**
     * @generated from protobuf field: string team_name = 3;
     */
    teamName: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentTeamName
 */
declare const Request_SetTournamentTeamName: Request_SetTournamentTeamName$Type;
declare class Request_SetTournamentTeamImage$Type extends MessageType<Request_SetTournamentTeamImage> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentTeamImage>): Request_SetTournamentTeamImage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentTeamImage): Request_SetTournamentTeamImage;
    internalBinaryWrite(message: Request_SetTournamentTeamImage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentTeamImage
 */
interface Request_SetTournamentTeamImage {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string team_id = 2;
     */
    teamId: string;
    /**
     * @generated from protobuf field: bytes team_image = 3;
     */
    teamImage: Uint8Array;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentTeamImage
 */
declare const Request_SetTournamentTeamImage: Request_SetTournamentTeamImage$Type;
declare class Request_RemoveTournamentTeam$Type extends MessageType<Request_RemoveTournamentTeam> {
    constructor();
    create(value?: PartialMessage<Request_RemoveTournamentTeam>): Request_RemoveTournamentTeam;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveTournamentTeam): Request_RemoveTournamentTeam;
    internalBinaryWrite(message: Request_RemoveTournamentTeam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveTournamentTeam
 */
interface Request_RemoveTournamentTeam {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string team_id = 2;
     */
    teamId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveTournamentTeam
 */
declare const Request_RemoveTournamentTeam: Request_RemoveTournamentTeam$Type;
declare class Request_AddTournamentPool$Type extends MessageType<Request_AddTournamentPool> {
    constructor();
    create(value?: PartialMessage<Request_AddTournamentPool>): Request_AddTournamentPool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddTournamentPool): Request_AddTournamentPool;
    internalBinaryWrite(message: Request_AddTournamentPool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddTournamentPool
 */
interface Request_AddTournamentPool {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.Tournament.TournamentSettings.Pool pool = 2;
     */
    pool?: Tournament_TournamentSettings_Pool;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddTournamentPool
 */
declare const Request_AddTournamentPool: Request_AddTournamentPool$Type;
declare class Request_SetTournamentPoolName$Type extends MessageType<Request_SetTournamentPoolName> {
    constructor();
    create(value?: PartialMessage<Request_SetTournamentPoolName>): Request_SetTournamentPoolName;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SetTournamentPoolName): Request_SetTournamentPoolName;
    internalBinaryWrite(message: Request_SetTournamentPoolName, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SetTournamentPoolName
 */
interface Request_SetTournamentPoolName {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string pool_id = 2;
     */
    poolId: string;
    /**
     * @generated from protobuf field: string pool_name = 3;
     */
    poolName: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SetTournamentPoolName
 */
declare const Request_SetTournamentPoolName: Request_SetTournamentPoolName$Type;
declare class Request_AddTournamentPoolMaps$Type extends MessageType<Request_AddTournamentPoolMaps> {
    constructor();
    create(value?: PartialMessage<Request_AddTournamentPoolMaps>): Request_AddTournamentPoolMaps;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddTournamentPoolMaps): Request_AddTournamentPoolMaps;
    internalBinaryWrite(message: Request_AddTournamentPoolMaps, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.AddTournamentPoolMaps
 */
interface Request_AddTournamentPoolMaps {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string pool_id = 2;
     */
    poolId: string;
    /**
     * @generated from protobuf field: repeated proto.models.Map maps = 3;
     */
    maps: Map[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddTournamentPoolMaps
 */
declare const Request_AddTournamentPoolMaps: Request_AddTournamentPoolMaps$Type;
declare class Request_UpdateTournamentPoolMap$Type extends MessageType<Request_UpdateTournamentPoolMap> {
    constructor();
    create(value?: PartialMessage<Request_UpdateTournamentPoolMap>): Request_UpdateTournamentPoolMap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_UpdateTournamentPoolMap): Request_UpdateTournamentPoolMap;
    internalBinaryWrite(message: Request_UpdateTournamentPoolMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.UpdateTournamentPoolMap
 */
interface Request_UpdateTournamentPoolMap {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string pool_id = 2;
     */
    poolId: string;
    /**
     * @generated from protobuf field: proto.models.Map map = 3;
     */
    map?: Map;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.UpdateTournamentPoolMap
 */
declare const Request_UpdateTournamentPoolMap: Request_UpdateTournamentPoolMap$Type;
declare class Request_RemoveTournamentPoolMap$Type extends MessageType<Request_RemoveTournamentPoolMap> {
    constructor();
    create(value?: PartialMessage<Request_RemoveTournamentPoolMap>): Request_RemoveTournamentPoolMap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveTournamentPoolMap): Request_RemoveTournamentPoolMap;
    internalBinaryWrite(message: Request_RemoveTournamentPoolMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveTournamentPoolMap
 */
interface Request_RemoveTournamentPoolMap {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string pool_id = 2;
     */
    poolId: string;
    /**
     * @generated from protobuf field: string map_id = 3;
     */
    mapId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveTournamentPoolMap
 */
declare const Request_RemoveTournamentPoolMap: Request_RemoveTournamentPoolMap$Type;
declare class Request_RemoveTournamentPool$Type extends MessageType<Request_RemoveTournamentPool> {
    constructor();
    create(value?: PartialMessage<Request_RemoveTournamentPool>): Request_RemoveTournamentPool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemoveTournamentPool): Request_RemoveTournamentPool;
    internalBinaryWrite(message: Request_RemoveTournamentPool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemoveTournamentPool
 */
interface Request_RemoveTournamentPool {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string pool_id = 2;
     */
    poolId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemoveTournamentPool
 */
declare const Request_RemoveTournamentPool: Request_RemoveTournamentPool$Type;
declare class Request_DeleteTournament$Type extends MessageType<Request_DeleteTournament> {
    constructor();
    create(value?: PartialMessage<Request_DeleteTournament>): Request_DeleteTournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_DeleteTournament): Request_DeleteTournament;
    internalBinaryWrite(message: Request_DeleteTournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.DeleteTournament
 */
interface Request_DeleteTournament {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.DeleteTournament
 */
declare const Request_DeleteTournament: Request_DeleteTournament$Type;
declare class Request_AddServer$Type extends MessageType<Request_AddServer> {
    constructor();
    create(value?: PartialMessage<Request_AddServer>): Request_AddServer;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_AddServer): Request_AddServer;
    internalBinaryWrite(message: Request_AddServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Server -- //
 *
 * @generated from protobuf message proto.packets.Request.AddServer
 */
interface Request_AddServer {
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 1;
     */
    server?: CoreServer;
    /**
     * @generated from protobuf field: string auth_token = 2;
     */
    authToken: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.AddServer
 */
declare const Request_AddServer: Request_AddServer$Type;
declare class Request_Connect$Type extends MessageType<Request_Connect> {
    constructor();
    create(value?: PartialMessage<Request_Connect>): Request_Connect;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_Connect): Request_Connect;
    internalBinaryWrite(message: Request_Connect, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * -- Other Requests -- //
 *
 * @generated from protobuf message proto.packets.Request.Connect
 */
interface Request_Connect {
    /**
     * @generated from protobuf field: int32 client_version = 1;
     */
    clientVersion: number;
    /**
     * @generated from protobuf field: int32 ui_version = 2;
     */
    uiVersion: number;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.Connect
 */
declare const Request_Connect: Request_Connect$Type;
declare class Request_Join$Type extends MessageType<Request_Join> {
    constructor();
    create(value?: PartialMessage<Request_Join>): Request_Join;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_Join): Request_Join;
    internalBinaryWrite(message: Request_Join, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.Join
 */
interface Request_Join {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.Join
 */
declare const Request_Join: Request_Join$Type;
declare class Request_QualifierScores$Type extends MessageType<Request_QualifierScores> {
    constructor();
    create(value?: PartialMessage<Request_QualifierScores>): Request_QualifierScores;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_QualifierScores): Request_QualifierScores;
    internalBinaryWrite(message: Request_QualifierScores, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.QualifierScores
 */
interface Request_QualifierScores {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string event_id = 2;
     */
    eventId: string;
    /**
     * @generated from protobuf field: string map_id = 3;
     */
    mapId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.QualifierScores
 */
declare const Request_QualifierScores: Request_QualifierScores$Type;
declare class Request_SubmitQualifierScore$Type extends MessageType<Request_SubmitQualifierScore> {
    constructor();
    create(value?: PartialMessage<Request_SubmitQualifierScore>): Request_SubmitQualifierScore;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_SubmitQualifierScore): Request_SubmitQualifierScore;
    internalBinaryWrite(message: Request_SubmitQualifierScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.SubmitQualifierScore
 */
interface Request_SubmitQualifierScore {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: proto.models.LeaderboardEntry qualifier_score = 2;
     */
    qualifierScore?: LeaderboardEntry;
    /**
     * @generated from protobuf field: proto.models.GameplayParameters map = 3;
     */
    map?: GameplayParameters;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.SubmitQualifierScore
 */
declare const Request_SubmitQualifierScore: Request_SubmitQualifierScore$Type;
declare class Request_LoadSong$Type extends MessageType<Request_LoadSong> {
    constructor();
    create(value?: PartialMessage<Request_LoadSong>): Request_LoadSong;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_LoadSong): Request_LoadSong;
    internalBinaryWrite(message: Request_LoadSong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.LoadSong
 */
interface Request_LoadSong {
    /**
     * @generated from protobuf field: string level_id = 1;
     */
    levelId: string;
    /**
     * @generated from protobuf field: string custom_host_url = 2;
     */
    customHostUrl: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.LoadSong
 */
declare const Request_LoadSong: Request_LoadSong$Type;
declare class Request_PreloadImageForStreamSync$Type extends MessageType<Request_PreloadImageForStreamSync> {
    constructor();
    create(value?: PartialMessage<Request_PreloadImageForStreamSync>): Request_PreloadImageForStreamSync;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_PreloadImageForStreamSync): Request_PreloadImageForStreamSync;
    internalBinaryWrite(message: Request_PreloadImageForStreamSync, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.PreloadImageForStreamSync
 */
interface Request_PreloadImageForStreamSync {
    /**
     * @generated from protobuf field: string file_id = 1;
     */
    fileId: string;
    /**
     * @generated from protobuf field: bool compressed = 2;
     */
    compressed: boolean;
    /**
     * @generated from protobuf field: bytes data = 3;
     */
    data: Uint8Array;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.PreloadImageForStreamSync
 */
declare const Request_PreloadImageForStreamSync: Request_PreloadImageForStreamSync$Type;
declare class Request_ShowPrompt$Type extends MessageType<Request_ShowPrompt> {
    constructor();
    create(value?: PartialMessage<Request_ShowPrompt>): Request_ShowPrompt;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_ShowPrompt): Request_ShowPrompt;
    internalBinaryWrite(message: Request_ShowPrompt, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.ShowPrompt
 */
interface Request_ShowPrompt {
    /**
     * @generated from protobuf field: string prompt_id = 1;
     */
    promptId: string;
    /**
     * @generated from protobuf field: string message_title = 2;
     */
    messageTitle: string;
    /**
     * @generated from protobuf field: string message_text = 3;
     */
    messageText: string;
    /**
     * @generated from protobuf field: int32 timeout = 4;
     */
    timeout: number;
    /**
     * @generated from protobuf field: bool show_timer = 5;
     */
    showTimer: boolean;
    /**
     * @generated from protobuf field: bool can_close = 6;
     */
    canClose: boolean;
    /**
     * @generated from protobuf field: repeated proto.packets.Request.ShowPrompt.PromptOption options = 7;
     */
    options: Request_ShowPrompt_PromptOption[];
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.ShowPrompt
 */
declare const Request_ShowPrompt: Request_ShowPrompt$Type;
declare class Request_ShowPrompt_PromptOption$Type extends MessageType<Request_ShowPrompt_PromptOption> {
    constructor();
    create(value?: PartialMessage<Request_ShowPrompt_PromptOption>): Request_ShowPrompt_PromptOption;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_ShowPrompt_PromptOption): Request_ShowPrompt_PromptOption;
    internalBinaryWrite(message: Request_ShowPrompt_PromptOption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.ShowPrompt.PromptOption
 */
interface Request_ShowPrompt_PromptOption {
    /**
     * @generated from protobuf field: string label = 1;
     */
    label: string;
    /**
     * @generated from protobuf field: string value = 2;
     */
    value: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.ShowPrompt.PromptOption
 */
declare const Request_ShowPrompt_PromptOption: Request_ShowPrompt_PromptOption$Type;
declare class Request_RemainingAttempts$Type extends MessageType<Request_RemainingAttempts> {
    constructor();
    create(value?: PartialMessage<Request_RemainingAttempts>): Request_RemainingAttempts;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RemainingAttempts): Request_RemainingAttempts;
    internalBinaryWrite(message: Request_RemainingAttempts, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RemainingAttempts
 */
interface Request_RemainingAttempts {
    /**
     * @generated from protobuf field: string tournament_id = 1;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string event_id = 2;
     */
    eventId: string;
    /**
     * @generated from protobuf field: string map_id = 3;
     */
    mapId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RemainingAttempts
 */
declare const Request_RemainingAttempts: Request_RemainingAttempts$Type;
declare class Request_GetBotTokensForUser$Type extends MessageType<Request_GetBotTokensForUser> {
    constructor();
    create(value?: PartialMessage<Request_GetBotTokensForUser>): Request_GetBotTokensForUser;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_GetBotTokensForUser): Request_GetBotTokensForUser;
    internalBinaryWrite(message: Request_GetBotTokensForUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.GetBotTokensForUser
 */
interface Request_GetBotTokensForUser {
    /**
     * @generated from protobuf field: string owner_discord_id = 1;
     */
    ownerDiscordId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.GetBotTokensForUser
 */
declare const Request_GetBotTokensForUser: Request_GetBotTokensForUser$Type;
declare class Request_GenerateBotToken$Type extends MessageType<Request_GenerateBotToken> {
    constructor();
    create(value?: PartialMessage<Request_GenerateBotToken>): Request_GenerateBotToken;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_GenerateBotToken): Request_GenerateBotToken;
    internalBinaryWrite(message: Request_GenerateBotToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.GenerateBotToken
 */
interface Request_GenerateBotToken {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.GenerateBotToken
 */
declare const Request_GenerateBotToken: Request_GenerateBotToken$Type;
declare class Request_RevokeBotToken$Type extends MessageType<Request_RevokeBotToken> {
    constructor();
    create(value?: PartialMessage<Request_RevokeBotToken>): Request_RevokeBotToken;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Request_RevokeBotToken): Request_RevokeBotToken;
    internalBinaryWrite(message: Request_RevokeBotToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Request.RevokeBotToken
 */
interface Request_RevokeBotToken {
    /**
     * @generated from protobuf field: string bot_token_guid = 1;
     */
    botTokenGuid: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Request.RevokeBotToken
 */
declare const Request_RevokeBotToken: Request_RevokeBotToken$Type;

/**
 * @generated from protobuf enum proto.packets.Push.SongFinished.CompletionType
 */
declare enum Push_SongFinished_CompletionType {
    /**
     * @generated from protobuf enum value: Passed = 0;
     */
    Passed = 0,
    /**
     * @generated from protobuf enum value: Failed = 1;
     */
    Failed = 1,
    /**
     * @generated from protobuf enum value: Quit = 2;
     */
    Quit = 2
}
declare class Push$Type extends MessageType<Push> {
    constructor();
    create(value?: PartialMessage<Push>): Push;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push): Push;
    internalBinaryWrite(message: Push, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * ---- Pushes (SUBMIT something!) ---- //
 *
 * @generated from protobuf message proto.packets.Push
 */
interface Push {
    /**
     * @generated from protobuf oneof: data
     */
    data: {
        oneofKind: "realtimeScore";
        /**
         * @generated from protobuf field: proto.models.RealtimeScore realtime_score = 1;
         */
        realtimeScore: RealtimeScore;
    } | {
        oneofKind: "songFinished";
        /**
         * @generated from protobuf field: proto.packets.Push.SongFinished song_finished = 2;
         */
        songFinished: Push_SongFinished;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Push
 */
declare const Push: Push$Type;
declare class Push_SongFinished$Type extends MessageType<Push_SongFinished> {
    constructor();
    create(value?: PartialMessage<Push_SongFinished>): Push_SongFinished;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Push_SongFinished): Push_SongFinished;
    internalBinaryWrite(message: Push_SongFinished, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Push.SongFinished
 */
interface Push_SongFinished {
    /**
     * @generated from protobuf field: proto.models.User player = 1;
     */
    player?: User;
    /**
     * @generated from protobuf field: proto.models.Beatmap beatmap = 2;
     */
    beatmap?: Beatmap;
    /**
     * @generated from protobuf field: proto.packets.Push.SongFinished.CompletionType type = 3;
     */
    type: Push_SongFinished_CompletionType;
    /**
     * @generated from protobuf field: int32 score = 4;
     */
    score: number;
    /**
     * @generated from protobuf field: int32 misses = 5;
     */
    misses: number;
    /**
     * @generated from protobuf field: int32 bad_cuts = 6;
     */
    badCuts: number;
    /**
     * @generated from protobuf field: int32 good_cuts = 7;
     */
    goodCuts: number;
    /**
     * @generated from protobuf field: float end_time = 8;
     */
    endTime: number;
    /**
     * @generated from protobuf field: string tournament_id = 9;
     */
    tournamentId: string;
    /**
     * @generated from protobuf field: string match_id = 10;
     */
    matchId: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Push.SongFinished
 */
declare const Push_SongFinished: Push_SongFinished$Type;

declare class Command$Type extends MessageType<Command> {
    constructor();
    create(value?: PartialMessage<Command>): Command;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command): Command;
    internalBinaryWrite(message: Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * ---- Commands (DO something!) ---- //
 *
 * @generated from protobuf message proto.packets.Command
 */
interface Command {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: bool heartbeat = 1;
         */
        heartbeat: boolean;
    } | {
        oneofKind: "returnToMenu";
        /**
         * @generated from protobuf field: bool return_to_menu = 2;
         */
        returnToMenu: boolean;
    } | {
        oneofKind: "delayTestFinish";
        /**
         * @generated from protobuf field: bool delay_test_finish = 3;
         */
        delayTestFinish: boolean;
    } | {
        oneofKind: "streamSyncShowImage";
        /**
         * @generated from protobuf field: bool stream_sync_show_image = 4;
         */
        streamSyncShowImage: boolean;
    } | {
        oneofKind: "playSong";
        /**
         * @generated from protobuf field: proto.packets.Command.PlaySong play_song = 6;
         */
        playSong: Command_PlaySong;
    } | {
        oneofKind: "sendBotMessage";
        /**
         * @generated from protobuf field: proto.packets.Command.SendBotMessage send_bot_message = 7;
         */
        sendBotMessage: Command_SendBotMessage;
    } | {
        oneofKind: "discordAuthorize";
        /**
         * @generated from protobuf field: string discord_authorize = 9;
         */
        discordAuthorize: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Command
 */
declare const Command: Command$Type;
declare class Command_PlaySong$Type extends MessageType<Command_PlaySong> {
    constructor();
    create(value?: PartialMessage<Command_PlaySong>): Command_PlaySong;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_PlaySong): Command_PlaySong;
    internalBinaryWrite(message: Command_PlaySong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Command.PlaySong
 */
interface Command_PlaySong {
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 1;
     */
    gameplayParameters?: GameplayParameters;
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.PlaySong
 */
declare const Command_PlaySong: Command_PlaySong$Type;
declare class Command_SendBotMessage$Type extends MessageType<Command_SendBotMessage> {
    constructor();
    create(value?: PartialMessage<Command_SendBotMessage>): Command_SendBotMessage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_SendBotMessage): Command_SendBotMessage;
    internalBinaryWrite(message: Command_SendBotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Command.SendBotMessage
 */
interface Command_SendBotMessage {
    /**
     * @generated from protobuf field: proto.discord.Channel channel = 1;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.SendBotMessage
 */
declare const Command_SendBotMessage: Command_SendBotMessage$Type;

/**
 * @generated from protobuf enum proto.packets.Acknowledgement.AcknowledgementType
 */
declare enum Acknowledgement_AcknowledgementType {
    /**
     * @generated from protobuf enum value: MessageReceived = 0;
     */
    MessageReceived = 0
}
declare class Acknowledgement$Type extends MessageType<Acknowledgement> {
    constructor();
    create(value?: PartialMessage<Acknowledgement>): Acknowledgement;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Acknowledgement): Acknowledgement;
    internalBinaryWrite(message: Acknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * ---- Backbone ---- //
 *
 * @generated from protobuf message proto.packets.Acknowledgement
 */
interface Acknowledgement {
    /**
     * @generated from protobuf field: string packet_id = 1;
     */
    packetId: string;
    /**
     * @generated from protobuf field: proto.packets.Acknowledgement.AcknowledgementType type = 2;
     */
    type: Acknowledgement_AcknowledgementType;
}
/**
 * @generated MessageType for protobuf message proto.packets.Acknowledgement
 */
declare const Acknowledgement: Acknowledgement$Type;
declare class ForwardingPacket$Type extends MessageType<ForwardingPacket> {
    constructor();
    create(value?: PartialMessage<ForwardingPacket>): ForwardingPacket;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardingPacket): ForwardingPacket;
    internalBinaryWrite(message: ForwardingPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.ForwardingPacket
 */
interface ForwardingPacket {
    /**
     * @generated from protobuf field: repeated string forward_to = 1;
     */
    forwardTo: string[];
    /**
     * @generated from protobuf field: proto.packets.Packet packet = 2;
     */
    packet?: Packet;
}
/**
 * @generated MessageType for protobuf message proto.packets.ForwardingPacket
 */
declare const ForwardingPacket: ForwardingPacket$Type;
declare class Packet$Type extends MessageType<Packet> {
    constructor();
    create(value?: PartialMessage<Packet>): Packet;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet;
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated from protobuf message proto.packets.Packet
 */
interface Packet {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string from = 3;
     */
    from: string;
    /**
     * @generated from protobuf oneof: packet
     */
    packet: {
        oneofKind: "acknowledgement";
        /**
         * @generated from protobuf field: proto.packets.Acknowledgement acknowledgement = 4;
         */
        acknowledgement: Acknowledgement;
    } | {
        oneofKind: "forwardingPacket";
        /**
         * @generated from protobuf field: proto.packets.ForwardingPacket forwarding_packet = 5;
         */
        forwardingPacket: ForwardingPacket;
    } | {
        oneofKind: "command";
        /**
         * @generated from protobuf field: proto.packets.Command command = 6;
         */
        command: Command;
    } | {
        oneofKind: "push";
        /**
         * @generated from protobuf field: proto.packets.Push push = 7;
         */
        push: Push;
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: proto.packets.Request request = 8;
         */
        request: Request;
    } | {
        oneofKind: "response";
        /**
         * @generated from protobuf field: proto.packets.Response response = 9;
         */
        response: Response;
    } | {
        oneofKind: "event";
        /**
         * @generated from protobuf field: proto.packets.Event event = 10;
         */
        event: Event;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated MessageType for protobuf message proto.packets.Packet
 */
declare const Packet: Packet$Type;

type StateManagerEvents = {
    userConnected: [User, Tournament];
    userUpdated: [User, Tournament];
    userDisconnected: [User, Tournament];
    matchCreated: [Match, Tournament];
    matchUpdated: [Match, Tournament];
    matchDeleted: [Match, Tournament];
    qualifierCreated: [QualifierEvent, Tournament];
    qualifierUpdated: [QualifierEvent, Tournament];
    qualifierDeleted: [QualifierEvent, Tournament];
    tournamentCreated: Tournament;
    tournamentUpdated: Tournament;
    tournamentDeleted: Tournament;
    serverAdded: CoreServer;
    serverDeleted: CoreServer;
};
declare class StateManager extends CustomEventEmitter<StateManagerEvents> {
    private state;
    private self;
    constructor();
    handlePacket(packet: Packet): void;
    getSelfGuid(): string;
    getTournaments(): Tournament[];
    getTournament(id: string): Tournament | undefined;
    getUsers(tournamentId: string): User[] | undefined;
    getUser(tournamentId: string, userId: string): User | undefined;
    getMatches(tournamentId: string): Match[] | undefined;
    getMatch(tournamentId: string, matchId: string): Match | undefined;
    getQualifiers(tournamentId: string): QualifierEvent[] | undefined;
    getQualifier(tournamentId: string, qualifierId: string): QualifierEvent | undefined;
    getKnownServers(): CoreServer[];
    private userConnected;
    private userUpdated;
    private userDisconnected;
    private matchCreated;
    private matchUpdated;
    private matchDeleted;
    private qualifierEventCreated;
    private qualifierEventUpdated;
    private qualifierEventDeleted;
    private tournamentCreated;
    private tournamentUpdated;
    private tournamentDeleted;
    private serverAdded;
    private serverDeleted;
}

declare function getTournaments(token: string, onProgress: (totalServers: number, succeededServers: number, failedServers: number) => void, onComplete: (tournaments: Tournament[]) => void): void;

type ResponseFromUser = {
    userId: string;
    response: Response;
};
type TAClientEvents = {
    connectedToServer: Response_Connect;
    connectingToServer: {};
    failedToConnectToServer: {};
    disconnectedFromServer: {};
    authorizationRequestedFromServer: string;
    loadSongRequested: [string, string, Request_LoadSong];
    songFinished: Push_SongFinished;
    realtimeScore: RealtimeScore;
    responseReceived: ResponseFromUser;
    joinedTournament: {};
    failedToJoinTournament: {};
    createdTournament: {};
    updatedTournament: {};
    deletedTournament: {};
    failedToCreateTournament: {};
    failedToUpdateTournament: {};
    failedToDeleteTournament: {};
    createdMatch: {};
    updatedMatch: {};
    deletedMatch: {};
    failedToCreateMatch: {};
    failedToUpdateMatch: {};
    failedToDeleteMatch: {};
    createdQualifier: {};
    updatedQualifier: {};
    deletedQualifier: {};
    failedToCreateQualifier: {};
    failedToUpdateQualifier: {};
    failedToDeleteQualifier: {};
};
declare class TAClient extends CustomEventEmitter<TAClientEvents> {
    stateManager: StateManager;
    private uiVersion;
    private client?;
    private token;
    private shouldHeartbeat;
    private heartbeatInterval;
    constructor(uiVersion?: number | undefined);
    get isConnected(): boolean;
    get isConnecting(): boolean;
    connect(serverAddress: string, port: string): Promise<Response>;
    disconnect(): void;
    setAuthToken(token: string): void;
    private forwardToUsers;
    private sendCommand;
    private sendRequest;
    sendResponse(response: Response, to?: string[]): Promise<void>;
    playSong: (gameplayParameters: GameplayParameters, userIds: string[]) => void;
    returnToMenu: (userIds: string[]) => void;
    showLoadedImage: (userIds: string[]) => void;
    delayTestFinished: (userIds: string[]) => void;
    joinTournament: (tournamentId: string) => Promise<Response>;
    getLeaderboard: (tournamentId: string, qualifierId: string, mapId: string) => Promise<Response>;
    loadSong: (levelId: string, userIds: string[], timeout?: number) => Promise<ResponseFromUser[]>;
    loadImage: (bitmap: Uint8Array, userIds: string[]) => Promise<ResponseFromUser[]>;
    showPrompt: (userIds: string[], titleText: string, bodyText: string, canClose: boolean, options: Request_ShowPrompt_PromptOption[], timer?: number) => Promise<ResponseFromUser[]>;
    private handlePacket;
    updateUser: (tournamentId: string, user: User) => Promise<Response>;
    createMatch: (tournamentId: string, match: Match) => Promise<Response>;
    addUserToMatch: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    removeUserFromMatch: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    setMatchLeader: (tournamentId: string, matchId: string, userId: string) => Promise<Response>;
    setMatchMap: (tournamentId: string, matchId: string, map: Map) => Promise<Response>;
    deleteMatch: (tournamentId: string, matchId: string) => Promise<Response>;
    createQualifierEvent: (tournamentId: string, event: QualifierEvent) => Promise<Response>;
    setQualifierName: (tournamentId: string, qualifierId: string, qualifierName: string) => Promise<Response>;
    setQualifierImage: (tournamentId: string, qualifierId: string, qualifierImage: Uint8Array) => Promise<Response>;
    setQualifierInfoChannel: (tournamentId: string, qualifierId: string, infoChannel: Channel) => Promise<Response>;
    setQualifierFlags: (tournamentId: string, qualifierId: string, qualifierFlags: QualifierEvent_EventSettings) => Promise<Response>;
    setQualifierLeaderboardSort: (tournamentId: string, qualifierId: string, qualifierLeaderboardSort: QualifierEvent_LeaderboardSort) => Promise<Response>;
    addQualifierMaps: (tournamentId: string, qualifierId: string, maps: Map[]) => Promise<Response>;
    updateQualifierMap: (tournamentId: string, qualifierId: string, map: Map) => Promise<Response>;
    removeQualifierMap: (tournamentId: string, qualifierId: string, mapId: string) => Promise<Response>;
    deleteQualifierEvent: (tournamentId: string, qualifierId: string) => Promise<Response>;
    addAuthorizedUser: (tournamentId: string, discordId: string, permissionFlags: Permissions) => Promise<Response>;
    removeAuthorizedUser: (tournamentId: string, discordId: string) => Promise<Response>;
    getAuthorizedUsers: (tournamentId: string) => Promise<Response>;
    getDiscordInfo: (tournamentId: string, discordId: string) => Promise<Response>;
    getBotTokensForUser: (ownerDiscordId: string) => Promise<Response>;
    generateBotToken: (username: string) => Promise<Response>;
    revokeBotToken: (botTokenGuid: string) => Promise<Response>;
    createTournament: (tournament: Tournament) => Promise<Response>;
    setTournamentName: (tournamentId: string, tournamentName: string) => Promise<Response>;
    setTournamentImage: (tournamentId: string, tournamentImage: Uint8Array) => Promise<Response>;
    setTournamentEnableTeams: (tournamentId: string, enableTeams: boolean) => Promise<Response>;
    setTournamentEnablePools: (tournamentId: string, enablePools: boolean) => Promise<Response>;
    setTournamentShowTournamentButton: (tournamentId: string, showTournamentButton: boolean) => Promise<Response>;
    setTournamentShowQualifierButton: (tournamentId: string, showQualifierButton: boolean) => Promise<Response>;
    setTournamentAllowUnauthorizedView: (tournamentId: string, allowUnauthorizedView: boolean) => Promise<Response>;
    setTournamentScoreUpdateFrequency: (tournamentId: string, scoreUpdateFrequency: number) => Promise<Response>;
    setTournamentBannedMods: (tournamentId: string, bannedMods: string[]) => Promise<Response>;
    addTournamentTeam: (tournamentId: string, team: Tournament_TournamentSettings_Team) => Promise<Response>;
    setTournamentTeamName: (tournamentId: string, teamId: string, teamName: string) => Promise<Response>;
    setTournamentTeamImage: (tournamentId: string, teamId: string, teamImage: Uint8Array) => Promise<Response>;
    removeTournamentTeam: (tournamentId: string, teamId: string) => Promise<Response>;
    addTournamentPool: (tournamentId: string, pool: Tournament_TournamentSettings_Pool) => Promise<Response>;
    setTournamentPoolName: (tournamentId: string, poolId: string, poolName: string) => Promise<Response>;
    addTournamentPoolMaps: (tournamentId: string, poolId: string, maps: Map[]) => Promise<Response>;
    updateTournamentPoolMap: (tournamentId: string, poolId: string, map: Map) => Promise<Response>;
    removeTournamentPoolMap: (tournamentId: string, poolId: string, mapId: string) => Promise<Response>;
    removeTournamentPool: (tournamentId: string, poolId: string) => Promise<Response>;
    deleteTournament: (tournamentId: string) => Promise<Response>;
    addServer: (server: CoreServer, authToken?: string) => Promise<Response>;
}

declare const masterAddress = "server.tournamentassistant.net";
declare const masterPort = "8676";
declare const version = "1.1.7";
declare const versionCode = 117;

export { Acknowledgement, Acknowledgement_AcknowledgementType, Beatmap, Channel, Characteristic, Command, Command_PlaySong, Command_SendBotMessage, CoreServer, CustomEventEmitter, DiscordUser, Event, Event_MatchCreated, Event_MatchDeleted, Event_MatchUpdated, Event_QualifierCreated, Event_QualifierDeleted, Event_QualifierUpdated, Event_ServerAdded, Event_ServerDeleted, Event_TournamentCreated, Event_TournamentDeleted, Event_TournamentUpdated, Event_UserAdded, Event_UserLeft, Event_UserUpdated, ForwardingPacket, GameplayModifiers, GameplayModifiers_GameOptions, GameplayParameters, Guild, LeaderboardEntry, Map, Match, Packet, Permissions, PlayerSpecificSettings, PlayerSpecificSettings_ArcVisibilityType, PlayerSpecificSettings_NoteJumpDurationTypeSettings, PlayerSpecificSettings_PlayerOptions, Push, Push_SongFinished, Push_SongFinished_CompletionType, QualifierEvent, QualifierEvent_EventSettings, QualifierEvent_LeaderboardSort, RealtimeScore, Request, Request_AddAuthorizedUser, Request_AddAuthorizedUserPermission, Request_AddQualifierMaps, Request_AddServer, Request_AddTournamentPool, Request_AddTournamentPoolMaps, Request_AddTournamentTeam, Request_AddUserToMatch, Request_Connect, Request_CreateMatch, Request_CreateQualifierEvent, Request_CreateTournament, Request_DeleteMatch, Request_DeleteQualifierEvent, Request_DeleteTournament, Request_GenerateBotToken, Request_GetAuthorizedUsers, Request_GetBotTokensForUser, Request_GetDiscordInfo, Request_Join, Request_LoadSong, Request_PreloadImageForStreamSync, Request_QualifierScores, Request_RemainingAttempts, Request_RemoveAuthorizedUser, Request_RemoveAuthorizedUserPermission, Request_RemoveQualifierMap, Request_RemoveTournamentPool, Request_RemoveTournamentPoolMap, Request_RemoveTournamentTeam, Request_RemoveUserFromMatch, Request_RevokeBotToken, Request_SetMatchLeader, Request_SetMatchMap, Request_SetQualifierFlags, Request_SetQualifierImage, Request_SetQualifierInfoChannel, Request_SetQualifierLeaderboardSort, Request_SetQualifierName, Request_SetTournamentAllowUnauthorizedView, Request_SetTournamentBannedMods, Request_SetTournamentEnablePools, Request_SetTournamentEnableTeams, Request_SetTournamentImage, Request_SetTournamentName, Request_SetTournamentPoolName, Request_SetTournamentScoreUpdateFrequency, Request_SetTournamentShowQualifierButton, Request_SetTournamentShowTournamentButton, Request_SetTournamentTeamImage, Request_SetTournamentTeamName, Request_ShowPrompt, Request_ShowPrompt_PromptOption, Request_SubmitQualifierScore, Request_UpdateQualifierMap, Request_UpdateTournamentPoolMap, Request_UpdateUser, Response, type ResponseFromUser, Response_AddAuthorizedUser, Response_AddServer, Response_Connect, Response_Connect_ConnectFailReason, Response_CreateMatch, Response_CreateQualifierEvent, Response_CreateTournament, Response_DeleteMatch, Response_DeleteQualifierEvent, Response_DeleteTournament, Response_GenerateBotToken, Response_GetAuthorizedUsers, Response_GetAuthorizedUsers_AuthroizedUser, Response_GetBotTokensForUser, Response_GetBotTokensForUser_BotUser, Response_GetDiscordInfo, Response_Join, Response_Join_JoinFailReason, Response_LeaderboardEntries, Response_LoadSong, Response_PreloadImageForStreamSync, Response_RemainingAttempts, Response_RemoveAuthorizedUser, Response_ResponseType, Response_RevokeBotToken, Response_ShowPrompt, Response_UpdateAuthorizedUser, Response_UpdateMatch, Response_UpdateQualifierEvent, Response_UpdateTournament, Response_UpdateUser, ScoreTrackerHand, State, TAClient, Tournament, Tournament_TournamentSettings, Tournament_TournamentSettings_Pool, Tournament_TournamentSettings_Team, User, User_ClientTypes, User_DiscordInfo, User_DownloadStates, User_PlayStates, User_Point, getTournaments, masterAddress, masterPort, version, versionCode };
