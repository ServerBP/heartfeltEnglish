import { CustomEventEmitter } from "./custom-event-emitter.js";
import { TAClient } from "./tournament-assistant-client.js";
const MASTER_ADDRESS = "server.tournamentassistant.net";
const MASTER_PORT = "8676";
export function getTournaments(token, onProgress, onComplete) {
    const scraper = new Scraper(token);
    scraper.on("onProgress", (progress) => {
        onProgress(progress.totalServers, progress.succeededServers, progress.failedServers);
        if (progress.failedServers + progress.succeededServers ===
            progress.totalServers) {
            onComplete(progress.tournaments);
        }
    });
    scraper.getTournaments();
}
class Scraper extends CustomEventEmitter {
    servers = [];
    tournaments = [];
    token;
    succeededServers = 0;
    failedServers = 0;
    constructor(token) {
        super();
        this.token = token;
    }
    getTournaments() {
        const masterClient = new TAClient();
        masterClient.setAuthToken(this.token);
        masterClient.on("connectedToServer", async (response) => {
            this.servers = response.state.knownServers;
            this.tournaments = response.state.tournaments;
            masterClient.disconnect();
            //We successfully got tournaments from the master server
            this.succeededServers++;
            this.emit("onProgress", {
                totalServers: this.servers.length,
                succeededServers: this.succeededServers,
                failedServers: this.failedServers,
                tournaments: this.tournaments,
            });
            //Just running this map kicks off all the Promises, so no need to await them.
            //This is probably a sin. If anyone knows the proper way to do this, hit me up on discord
            this.servers
                .filter((x) => `${x.address}:${x.websocketPort}` !==
                `${MASTER_ADDRESS}:${MASTER_PORT}`)
                .map((x) => this.getTournamentsFromServer(x.address, `${x.websocketPort}`));
        });
        masterClient.on("failedToConnectToServer", () => {
            //We failed to get tournaments from the master server
            this.failedServers++;
            this.emit("onProgress", {
                totalServers: this.servers.length,
                succeededServers: this.succeededServers,
                failedServers: this.failedServers,
                tournaments: this.tournaments,
            });
        });
        masterClient.connect(MASTER_ADDRESS, MASTER_PORT);
    }
    async getTournamentsFromServer(address, port) {
        const client = new TAClient();
        client.setAuthToken(this.token);
        client.on("connectedToServer", (response) => {
            this.tournaments = [...this.tournaments, ...response.state.tournaments];
            client.disconnect();
            //We successfully got tournaments from the server
            this.succeededServers++;
            this.emit("onProgress", {
                totalServers: this.servers.length,
                succeededServers: this.succeededServers,
                failedServers: this.failedServers,
                tournaments: this.tournaments,
            });
        });
        client.on("failedToConnectToServer", () => {
            //We failed to get tournaments from the server
            this.failedServers++;
            this.emit("onProgress", {
                totalServers: this.servers.length,
                succeededServers: this.succeededServers,
                failedServers: this.failedServers,
                tournaments: this.tournaments,
            });
        });
        client.connect(address, port);
    }
}
