import { CustomEventEmitter } from "./custom-event-emitter.js";
import { Packet } from "./models/packets.js";
import WebSocket from "ws";
export class Client extends CustomEventEmitter {
    address;
    port;
    token;
    websocket;
    websocketWasConnected = false;
    constructor(address, port, token) {
        super();
        this.address = address;
        this.port = port;
        this.token = token ?? "";
    }
    get isConnected() {
        return this.websocket?.readyState === WebSocket.OPEN;
    }
    get readyState() {
        return this.websocket?.readyState;
    }
    connect() {
        this.websocket = new WebSocket(`wss://${this.address}:${this.port}`);
        this.websocket.binaryType = "arraybuffer";
        if (!this.websocket) {
            this.emit("failedToConnectToServer", {});
            return;
        }
        this.websocket.onopen = () => {
            this.websocketWasConnected = true;
            this.emit("connectedToServer", {});
        };
        this.websocket.onmessage = (event) => {
            if (event.data instanceof ArrayBuffer) {
                const packet = Packet.fromBinary(new Uint8Array(event.data));
                this.emit("packetReceived", packet);
            }
        };
        this.websocket.onclose = () => {
            if (this.websocketWasConnected) {
                this.emit("disconnectedFromServer", {});
            }
            else {
                this.emit("failedToConnectToServer", {});
            }
        };
        this.websocket.onerror = (error) => {
            console.error(error);
        };
    }
    disconnect() {
        this.websocket?.close();
    }
    setToken(token) {
        this.token = token;
    }
    send(packet, ids) {
        let toSend = packet;
        toSend.token = this.token;
        if (ids) {
            const toForward = {
                packet,
                forwardTo: ids,
            };
            toSend = {
                token: this.token,
                from: packet.from,
                id: packet.id,
                packet: {
                    oneofKind: "forwardingPacket",
                    forwardingPacket: toForward,
                },
            };
        }
        this.websocket?.send(Packet.toBinary(toSend));
    }
}
