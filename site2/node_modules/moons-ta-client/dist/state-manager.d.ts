import { CustomEventEmitter } from "./custom-event-emitter.js";
import { User, Tournament, Match, QualifierEvent, CoreServer } from "./models/models.js";
import { Packet } from "./models/packets.js";
type StateManagerEvents = {
    userConnected: [User, Tournament];
    userUpdated: [User, Tournament];
    userDisconnected: [User, Tournament];
    matchCreated: [Match, Tournament];
    matchUpdated: [Match, Tournament];
    matchDeleted: [Match, Tournament];
    qualifierCreated: [QualifierEvent, Tournament];
    qualifierUpdated: [QualifierEvent, Tournament];
    qualifierDeleted: [QualifierEvent, Tournament];
    tournamentCreated: Tournament;
    tournamentUpdated: Tournament;
    tournamentDeleted: Tournament;
    serverAdded: CoreServer;
    serverDeleted: CoreServer;
};
export declare class StateManager extends CustomEventEmitter<StateManagerEvents> {
    private state;
    private self;
    constructor();
    handlePacket(packet: Packet): void;
    getSelfGuid(): string;
    getTournaments(): Tournament[];
    getTournament(id: string): Tournament | undefined;
    getUsers(tournamentId: string): User[] | undefined;
    getUser(tournamentId: string, userId: string): User | undefined;
    getMatches(tournamentId: string): Match[] | undefined;
    getMatch(tournamentId: string, matchId: string): Match | undefined;
    getQualifiers(tournamentId: string): QualifierEvent[] | undefined;
    getQualifier(tournamentId: string, qualifierId: string): QualifierEvent | undefined;
    getKnownServers(): CoreServer[];
    private userConnected;
    private userUpdated;
    private userDisconnected;
    private matchCreated;
    private matchUpdated;
    private matchDeleted;
    private qualifierEventCreated;
    private qualifierEventUpdated;
    private qualifierEventDeleted;
    private tournamentCreated;
    private tournamentUpdated;
    private tournamentDeleted;
    private serverAdded;
    private serverDeleted;
}
export {};
