import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Channel } from './discord.js';
import { GameplayParameters } from './models.js';
/**
 * ---- Commands (DO something!) ---- //
 *
 * @generated from protobuf message proto.packets.Command
 */
export interface Command {
    /**
     * @generated from protobuf oneof: type
     */
    type: {
        oneofKind: "heartbeat";
        /**
         * @generated from protobuf field: bool heartbeat = 1;
         */
        heartbeat: boolean;
    } | {
        oneofKind: "returnToMenu";
        /**
         * @generated from protobuf field: bool return_to_menu = 2;
         */
        returnToMenu: boolean;
    } | {
        oneofKind: "delayTestFinish";
        /**
         * @generated from protobuf field: bool delay_test_finish = 3;
         */
        delayTestFinish: boolean;
    } | {
        oneofKind: "streamSyncShowImage";
        /**
         * @generated from protobuf field: bool stream_sync_show_image = 4;
         */
        streamSyncShowImage: boolean;
    } | {
        oneofKind: "playSong";
        /**
         * @generated from protobuf field: proto.packets.Command.PlaySong play_song = 6;
         */
        playSong: Command_PlaySong;
    } | {
        oneofKind: "sendBotMessage";
        /**
         * @generated from protobuf field: proto.packets.Command.SendBotMessage send_bot_message = 7;
         */
        sendBotMessage: Command_SendBotMessage;
    } | {
        oneofKind: "discordAuthorize";
        /**
         * @generated from protobuf field: string discord_authorize = 9;
         */
        discordAuthorize: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message proto.packets.Command.PlaySong
 */
export interface Command_PlaySong {
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 1;
     */
    gameplayParameters?: GameplayParameters;
}
/**
 * @generated from protobuf message proto.packets.Command.SendBotMessage
 */
export interface Command_SendBotMessage {
    /**
     * @generated from protobuf field: proto.discord.Channel channel = 1;
     */
    channel?: Channel;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
declare class Command$Type extends MessageType<Command> {
    constructor();
    create(value?: PartialMessage<Command>): Command;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command): Command;
    internalBinaryWrite(message: Command, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.Command
 */
export declare const Command: Command$Type;
declare class Command_PlaySong$Type extends MessageType<Command_PlaySong> {
    constructor();
    create(value?: PartialMessage<Command_PlaySong>): Command_PlaySong;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_PlaySong): Command_PlaySong;
    internalBinaryWrite(message: Command_PlaySong, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.PlaySong
 */
export declare const Command_PlaySong: Command_PlaySong$Type;
declare class Command_SendBotMessage$Type extends MessageType<Command_SendBotMessage> {
    constructor();
    create(value?: PartialMessage<Command_SendBotMessage>): Command_SendBotMessage;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Command_SendBotMessage): Command_SendBotMessage;
    internalBinaryWrite(message: Command_SendBotMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.Command.SendBotMessage
 */
export declare const Command_SendBotMessage: Command_SendBotMessage$Type;
export {};
