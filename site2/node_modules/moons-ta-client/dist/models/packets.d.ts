import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Event } from './events.js';
import { Response } from './responses.js';
import { Request } from './requests.js';
import { Push } from './pushes.js';
import { Command } from './commands.js';
/**
 * ---- Backbone ---- //
 *
 * @generated from protobuf message proto.packets.Acknowledgement
 */
export interface Acknowledgement {
    /**
     * @generated from protobuf field: string packet_id = 1;
     */
    packetId: string;
    /**
     * @generated from protobuf field: proto.packets.Acknowledgement.AcknowledgementType type = 2;
     */
    type: Acknowledgement_AcknowledgementType;
}
/**
 * @generated from protobuf enum proto.packets.Acknowledgement.AcknowledgementType
 */
export declare enum Acknowledgement_AcknowledgementType {
    /**
     * @generated from protobuf enum value: MessageReceived = 0;
     */
    MessageReceived = 0
}
/**
 * @generated from protobuf message proto.packets.ForwardingPacket
 */
export interface ForwardingPacket {
    /**
     * @generated from protobuf field: repeated string forward_to = 1;
     */
    forwardTo: string[];
    /**
     * @generated from protobuf field: proto.packets.Packet packet = 2;
     */
    packet?: Packet;
}
/**
 * @generated from protobuf message proto.packets.Packet
 */
export interface Packet {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string id = 2;
     */
    id: string;
    /**
     * @generated from protobuf field: string from = 3;
     */
    from: string;
    /**
     * @generated from protobuf oneof: packet
     */
    packet: {
        oneofKind: "acknowledgement";
        /**
         * @generated from protobuf field: proto.packets.Acknowledgement acknowledgement = 4;
         */
        acknowledgement: Acknowledgement;
    } | {
        oneofKind: "forwardingPacket";
        /**
         * @generated from protobuf field: proto.packets.ForwardingPacket forwarding_packet = 5;
         */
        forwardingPacket: ForwardingPacket;
    } | {
        oneofKind: "command";
        /**
         * @generated from protobuf field: proto.packets.Command command = 6;
         */
        command: Command;
    } | {
        oneofKind: "push";
        /**
         * @generated from protobuf field: proto.packets.Push push = 7;
         */
        push: Push;
    } | {
        oneofKind: "request";
        /**
         * @generated from protobuf field: proto.packets.Request request = 8;
         */
        request: Request;
    } | {
        oneofKind: "response";
        /**
         * @generated from protobuf field: proto.packets.Response response = 9;
         */
        response: Response;
    } | {
        oneofKind: "event";
        /**
         * @generated from protobuf field: proto.packets.Event event = 10;
         */
        event: Event;
    } | {
        oneofKind: undefined;
    };
}
declare class Acknowledgement$Type extends MessageType<Acknowledgement> {
    constructor();
    create(value?: PartialMessage<Acknowledgement>): Acknowledgement;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Acknowledgement): Acknowledgement;
    internalBinaryWrite(message: Acknowledgement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.Acknowledgement
 */
export declare const Acknowledgement: Acknowledgement$Type;
declare class ForwardingPacket$Type extends MessageType<ForwardingPacket> {
    constructor();
    create(value?: PartialMessage<ForwardingPacket>): ForwardingPacket;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForwardingPacket): ForwardingPacket;
    internalBinaryWrite(message: ForwardingPacket, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.ForwardingPacket
 */
export declare const ForwardingPacket: ForwardingPacket$Type;
declare class Packet$Type extends MessageType<Packet> {
    constructor();
    create(value?: PartialMessage<Packet>): Packet;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Packet): Packet;
    internalBinaryWrite(message: Packet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.packets.Packet
 */
export declare const Packet: Packet$Type;
export {};
