import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Channel } from './discord.js';
/**
 * @generated from protobuf message proto.models.Characteristic
 */
export interface Characteristic {
    /**
     * @generated from protobuf field: string serialized_name = 1;
     */
    serializedName: string;
    /**
     * @generated from protobuf field: repeated int32 difficulties = 2;
     */
    difficulties: number[];
}
/**
 * @generated from protobuf message proto.models.Beatmap
 */
export interface Beatmap {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string level_id = 2;
     */
    levelId: string;
    /**
     * @generated from protobuf field: proto.models.Characteristic characteristic = 3;
     */
    characteristic?: Characteristic;
    /**
     * @generated from protobuf field: int32 difficulty = 4;
     */
    difficulty: number;
}
/**
 * @generated from protobuf message proto.models.GameplayModifiers
 */
export interface GameplayModifiers {
    /**
     * @generated from protobuf field: proto.models.GameplayModifiers.GameOptions options = 1;
     */
    options: GameplayModifiers_GameOptions;
}
/**
 * @generated from protobuf enum proto.models.GameplayModifiers.GameOptions
 */
export declare enum GameplayModifiers_GameOptions {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * Negative modifiers
     *
     * @generated from protobuf enum value: NoFail = 1;
     */
    NoFail = 1,
    /**
     * @generated from protobuf enum value: NoBombs = 2;
     */
    NoBombs = 2,
    /**
     * @generated from protobuf enum value: NoArrows = 4;
     */
    NoArrows = 4,
    /**
     * @generated from protobuf enum value: NoObstacles = 8;
     */
    NoObstacles = 8,
    /**
     * @generated from protobuf enum value: SlowSong = 16;
     */
    SlowSong = 16,
    /**
     * Positive Modifiers
     *
     * @generated from protobuf enum value: InstaFail = 32;
     */
    InstaFail = 32,
    /**
     * @generated from protobuf enum value: FailOnClash = 64;
     */
    FailOnClash = 64,
    /**
     * @generated from protobuf enum value: BatteryEnergy = 128;
     */
    BatteryEnergy = 128,
    /**
     * @generated from protobuf enum value: FastNotes = 256;
     */
    FastNotes = 256,
    /**
     * @generated from protobuf enum value: FastSong = 512;
     */
    FastSong = 512,
    /**
     * @generated from protobuf enum value: DisappearingArrows = 1024;
     */
    DisappearingArrows = 1024,
    /**
     * @generated from protobuf enum value: GhostNotes = 2048;
     */
    GhostNotes = 2048,
    /**
     * 1.12.2 Additions
     *
     * @generated from protobuf enum value: DemoNoFail = 4096;
     */
    DemoNoFail = 4096,
    /**
     * @generated from protobuf enum value: DemoNoObstacles = 8192;
     */
    DemoNoObstacles = 8192,
    /**
     * @generated from protobuf enum value: StrictAngles = 16384;
     */
    StrictAngles = 16384,
    /**
     * 1.13.4 Additions
     *
     * @generated from protobuf enum value: ProMode = 32768;
     */
    ProMode = 32768,
    /**
     * @generated from protobuf enum value: ZenMode = 65536;
     */
    ZenMode = 65536,
    /**
     * @generated from protobuf enum value: SmallCubes = 131072;
     */
    SmallCubes = 131072,
    /**
     * @generated from protobuf enum value: SuperFastSong = 262144;
     */
    SuperFastSong = 262144
}
/**
 * @generated from protobuf message proto.models.PlayerSpecificSettings
 */
export interface PlayerSpecificSettings {
    /**
     * @generated from protobuf field: float player_height = 1;
     */
    playerHeight: number;
    /**
     * @generated from protobuf field: float sfx_volume = 2;
     */
    sfxVolume: number;
    /**
     * @generated from protobuf field: float saber_trail_intensity = 3;
     */
    saberTrailIntensity: number;
    /**
     * @generated from protobuf field: float note_jump_start_beat_offset = 4;
     */
    noteJumpStartBeatOffset: number;
    /**
     * @generated from protobuf field: float note_jump_fixed_duration = 5;
     */
    noteJumpFixedDuration: number;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.PlayerOptions options = 6;
     */
    options: PlayerSpecificSettings_PlayerOptions;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.NoteJumpDurationTypeSettings note_jump_duration_type_settings = 7;
     */
    noteJumpDurationTypeSettings: PlayerSpecificSettings_NoteJumpDurationTypeSettings;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings.ArcVisibilityType arc_visibility_type = 8;
     */
    arcVisibilityType: PlayerSpecificSettings_ArcVisibilityType;
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.PlayerOptions
 */
export declare enum PlayerSpecificSettings_PlayerOptions {
    /**
     * @generated from protobuf enum value: NoPlayerOptions = 0;
     */
    NoPlayerOptions = 0,
    /**
     * @generated from protobuf enum value: LeftHanded = 1;
     */
    LeftHanded = 1,
    /**
     * @generated from protobuf enum value: StaticLights = 2;
     */
    StaticLights = 2,
    /**
     * @generated from protobuf enum value: NoHud = 4;
     */
    NoHud = 4,
    /**
     * @generated from protobuf enum value: AdvancedHud = 8;
     */
    AdvancedHud = 8,
    /**
     * @generated from protobuf enum value: ReduceDebris = 16;
     */
    ReduceDebris = 16,
    /**
     * @generated from protobuf enum value: AutoPlayerHeight = 32;
     */
    AutoPlayerHeight = 32,
    /**
     * @generated from protobuf enum value: NoFailEffects = 64;
     */
    NoFailEffects = 64,
    /**
     * @generated from protobuf enum value: AutoRestart = 128;
     */
    AutoRestart = 128,
    /**
     * @generated from protobuf enum value: HideNoteSpawnEffect = 256;
     */
    HideNoteSpawnEffect = 256,
    /**
     * @generated from protobuf enum value: AdaptiveSfx = 512;
     */
    AdaptiveSfx = 512,
    /**
     * @generated from protobuf enum value: ArcsHapticFeedback = 1024;
     */
    ArcsHapticFeedback = 1024
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.NoteJumpDurationTypeSettings
 */
export declare enum PlayerSpecificSettings_NoteJumpDurationTypeSettings {
    /**
     * @generated from protobuf enum value: Dynamic = 0;
     */
    Dynamic = 0,
    /**
     * @generated from protobuf enum value: Static = 1;
     */
    Static = 1
}
/**
 * @generated from protobuf enum proto.models.PlayerSpecificSettings.ArcVisibilityType
 */
export declare enum PlayerSpecificSettings_ArcVisibilityType {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Low = 1;
     */
    Low = 1,
    /**
     * @generated from protobuf enum value: Standard = 2;
     */
    Standard = 2,
    /**
     * @generated from protobuf enum value: High = 3;
     */
    High = 3
}
/**
 * @generated from protobuf message proto.models.GameplayParameters
 */
export interface GameplayParameters {
    /**
     * @generated from protobuf field: proto.models.Beatmap beatmap = 1;
     */
    beatmap?: Beatmap;
    /**
     * @generated from protobuf field: proto.models.PlayerSpecificSettings player_settings = 2;
     */
    playerSettings?: PlayerSpecificSettings;
    /**
     * @generated from protobuf field: proto.models.GameplayModifiers gameplay_modifiers = 3;
     */
    gameplayModifiers?: GameplayModifiers;
    /**
     * @generated from protobuf field: int32 attempts = 4;
     */
    attempts: number;
    /**
     * @generated from protobuf field: bool show_scoreboard = 5;
     */
    showScoreboard: boolean;
    /**
     * @generated from protobuf field: bool disable_pause = 6;
     */
    disablePause: boolean;
    /**
     * @generated from protobuf field: bool disable_fail = 7;
     */
    disableFail: boolean;
    /**
     * @generated from protobuf field: bool disable_scoresaber_submission = 8;
     */
    disableScoresaberSubmission: boolean;
    /**
     * @generated from protobuf field: bool disable_custom_notes_on_stream = 9;
     */
    disableCustomNotesOnStream: boolean;
    /**
     * @generated from protobuf field: bool use_sync = 10;
     */
    useSync: boolean;
    /**
     * @generated from protobuf field: int32 target = 11;
     */
    target: number;
}
/**
 * @generated from protobuf message proto.models.Map
 */
export interface Map {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: proto.models.GameplayParameters gameplay_parameters = 2;
     */
    gameplayParameters?: GameplayParameters;
}
/**
 * @generated from protobuf message proto.models.User
 */
export interface User {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string platform_id = 3;
     */
    platformId: string;
    /**
     * @generated from protobuf field: proto.models.User.ClientTypes client_type = 4;
     */
    clientType: User_ClientTypes;
    /**
     * @generated from protobuf field: string team_id = 5;
     */
    teamId: string;
    /**
     * @generated from protobuf field: proto.models.User.PlayStates play_state = 6;
     */
    playState: User_PlayStates;
    /**
     * @generated from protobuf field: proto.models.User.DownloadStates download_state = 7;
     */
    downloadState: User_DownloadStates;
    /**
     * @generated from protobuf field: repeated string mod_list = 8;
     */
    modList: string[];
    /**
     * @generated from protobuf field: proto.models.User.Point stream_screen_coordinates = 9;
     */
    streamScreenCoordinates?: User_Point;
    /**
     * @generated from protobuf field: int64 stream_delay_ms = 10;
     */
    streamDelayMs: bigint;
    /**
     * @generated from protobuf field: int64 stream_sync_start_ms = 11;
     */
    streamSyncStartMs: bigint;
    /**
     * @generated from protobuf field: proto.models.User.DiscordInfo discord_info = 12;
     */
    discordInfo?: User_DiscordInfo;
    /**
     * @generated from protobuf field: bytes user_image = 13;
     */
    userImage: Uint8Array;
    /**
     * @generated from protobuf field: proto.models.Permissions permissions = 14;
     */
    permissions: Permissions;
}
/**
 * @generated from protobuf message proto.models.User.DiscordInfo
 */
export interface User_DiscordInfo {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
    /**
     * @generated from protobuf field: string avatar_url = 3;
     */
    avatarUrl: string;
}
/**
 * @generated from protobuf message proto.models.User.Point
 */
export interface User_Point {
    /**
     * @generated from protobuf field: int32 x = 1;
     */
    x: number;
    /**
     * @generated from protobuf field: int32 y = 2;
     */
    y: number;
}
/**
 * @generated from protobuf enum proto.models.User.PlayStates
 */
export declare enum User_PlayStates {
    /**
     * @generated from protobuf enum value: InMenu = 0;
     */
    InMenu = 0,
    /**
     * @generated from protobuf enum value: WaitingForCoordinator = 1;
     */
    WaitingForCoordinator = 1,
    /**
     * @generated from protobuf enum value: InGame = 2;
     */
    InGame = 2
}
/**
 * @generated from protobuf enum proto.models.User.DownloadStates
 */
export declare enum User_DownloadStates {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: Downloading = 1;
     */
    Downloading = 1,
    /**
     * @generated from protobuf enum value: Downloaded = 2;
     */
    Downloaded = 2,
    /**
     * @generated from protobuf enum value: DownloadError = 3;
     */
    DownloadError = 3
}
/**
 * @generated from protobuf enum proto.models.User.ClientTypes
 */
export declare enum User_ClientTypes {
    /**
     * @generated from protobuf enum value: Player = 0;
     */
    Player = 0,
    /**
     * @generated from protobuf enum value: WebsocketConnection = 1;
     */
    WebsocketConnection = 1
}
/**
 * @generated from protobuf message proto.models.Match
 */
export interface Match {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: repeated string associated_users = 2;
     */
    associatedUsers: string[];
    /**
     * @generated from protobuf field: string leader = 3;
     */
    leader: string;
    /**
     * @generated from protobuf field: proto.models.Map selected_map = 4;
     */
    selectedMap?: Map;
}
/**
 * @generated from protobuf message proto.models.QualifierEvent
 */
export interface QualifierEvent {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: proto.discord.Channel info_channel = 4;
     */
    infoChannel?: Channel;
    /**
     * @generated from protobuf field: repeated proto.models.Map qualifier_maps = 5;
     */
    qualifierMaps: Map[];
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.EventSettings flags = 6;
     */
    flags: QualifierEvent_EventSettings;
    /**
     * @generated from protobuf field: proto.models.QualifierEvent.LeaderboardSort sort = 7;
     */
    sort: QualifierEvent_LeaderboardSort;
}
/**
 * @generated from protobuf enum proto.models.QualifierEvent.EventSettings
 */
export declare enum QualifierEvent_EventSettings {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: HideScoresFromPlayers = 1;
     */
    HideScoresFromPlayers = 1,
    /**
     * @generated from protobuf enum value: DisableScoresaberSubmission = 2;
     */
    DisableScoresaberSubmission = 2,
    /**
     * @generated from protobuf enum value: EnableDiscordScoreFeed = 4;
     */
    EnableDiscordScoreFeed = 4,
    /**
     * @generated from protobuf enum value: EnableDiscordLeaderboard = 8;
     */
    EnableDiscordLeaderboard = 8
}
/**
 * @generated from protobuf enum proto.models.QualifierEvent.LeaderboardSort
 */
export declare enum QualifierEvent_LeaderboardSort {
    /**
     * @generated from protobuf enum value: ModifiedScore = 0;
     */
    ModifiedScore = 0,
    /**
     * @generated from protobuf enum value: ModifiedScoreAscending = 1;
     */
    ModifiedScoreAscending = 1,
    /**
     * @generated from protobuf enum value: ModifiedScoreTarget = 2;
     */
    ModifiedScoreTarget = 2,
    /**
     * @generated from protobuf enum value: NotesMissed = 3;
     */
    NotesMissed = 3,
    /**
     * @generated from protobuf enum value: NotesMissedAscending = 4;
     */
    NotesMissedAscending = 4,
    /**
     * @generated from protobuf enum value: NotesMissedTarget = 5;
     */
    NotesMissedTarget = 5,
    /**
     * @generated from protobuf enum value: BadCuts = 6;
     */
    BadCuts = 6,
    /**
     * @generated from protobuf enum value: BadCutsAscending = 7;
     */
    BadCutsAscending = 7,
    /**
     * @generated from protobuf enum value: BadCutsTarget = 8;
     */
    BadCutsTarget = 8,
    /**
     * @generated from protobuf enum value: MaxCombo = 9;
     */
    MaxCombo = 9,
    /**
     * @generated from protobuf enum value: MaxComboAscending = 10;
     */
    MaxComboAscending = 10,
    /**
     * @generated from protobuf enum value: MaxComboTarget = 11;
     */
    MaxComboTarget = 11,
    /**
     * @generated from protobuf enum value: GoodCuts = 12;
     */
    GoodCuts = 12,
    /**
     * @generated from protobuf enum value: GoodCutsAscending = 13;
     */
    GoodCutsAscending = 13,
    /**
     * @generated from protobuf enum value: GoodCutsTarget = 14;
     */
    GoodCutsTarget = 14
}
/**
 * @generated from protobuf message proto.models.CoreServer
 */
export interface CoreServer {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string address = 2;
     */
    address: string;
    /**
     * @generated from protobuf field: int32 port = 3;
     */
    port: number;
    /**
     * @generated from protobuf field: int32 websocket_port = 4;
     */
    websocketPort: number;
}
/**
 * @generated from protobuf message proto.models.Tournament
 */
export interface Tournament {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: proto.models.Tournament.TournamentSettings settings = 2;
     */
    settings?: Tournament_TournamentSettings;
    /**
     * @generated from protobuf field: repeated proto.models.User users = 3;
     */
    users: User[];
    /**
     * @generated from protobuf field: repeated proto.models.Match matches = 4;
     */
    matches: Match[];
    /**
     * @generated from protobuf field: repeated proto.models.QualifierEvent qualifiers = 5;
     */
    qualifiers: QualifierEvent[];
    /**
     * @generated from protobuf field: proto.models.CoreServer server = 6;
     */
    server?: CoreServer;
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings
 */
export interface Tournament_TournamentSettings {
    /**
     * @generated from protobuf field: string tournament_name = 1;
     */
    tournamentName: string;
    /**
     * @generated from protobuf field: bytes tournament_image = 2;
     */
    tournamentImage: Uint8Array;
    /**
     * @generated from protobuf field: bool enable_teams = 3;
     */
    enableTeams: boolean;
    /**
     * @generated from protobuf field: bool enable_pools = 4;
     */
    enablePools: boolean;
    /**
     * @generated from protobuf field: repeated proto.models.Tournament.TournamentSettings.Team teams = 5;
     */
    teams: Tournament_TournamentSettings_Team[];
    /**
     * @generated from protobuf field: int32 score_update_frequency = 6;
     */
    scoreUpdateFrequency: number;
    /**
     * @generated from protobuf field: repeated string banned_mods = 7;
     */
    bannedMods: string[];
    /**
     * @generated from protobuf field: repeated proto.models.Tournament.TournamentSettings.Pool pools = 8;
     */
    pools: Tournament_TournamentSettings_Pool[];
    /**
     * @generated from protobuf field: bool show_tournament_button = 9;
     */
    showTournamentButton: boolean;
    /**
     * @generated from protobuf field: bool show_qualifier_button = 10;
     */
    showQualifierButton: boolean;
    /**
     * @generated from protobuf field: bool allow_unauthorized_view = 11;
     */
    allowUnauthorizedView: boolean;
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings.Pool
 */
export interface Tournament_TournamentSettings_Pool {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
    /**
     * @generated from protobuf field: repeated proto.models.Map maps = 4;
     */
    maps: Map[];
}
/**
 * @generated from protobuf message proto.models.Tournament.TournamentSettings.Team
 */
export interface Tournament_TournamentSettings_Team {
    /**
     * @generated from protobuf field: string guid = 1;
     */
    guid: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: bytes image = 3;
     */
    image: Uint8Array;
}
/**
 * @generated from protobuf message proto.models.State
 */
export interface State {
    /**
     * @generated from protobuf field: repeated proto.models.Tournament tournaments = 1;
     */
    tournaments: Tournament[];
    /**
     * @generated from protobuf field: repeated proto.models.CoreServer known_servers = 2;
     */
    knownServers: CoreServer[];
}
/**
 * @generated from protobuf message proto.models.LeaderboardEntry
 */
export interface LeaderboardEntry {
    /**
     * @generated from protobuf field: string event_id = 1;
     */
    eventId: string;
    /**
     * @generated from protobuf field: string map_id = 2;
     */
    mapId: string;
    /**
     * @generated from protobuf field: string platform_id = 3;
     */
    platformId: string;
    /**
     * @generated from protobuf field: string username = 4;
     */
    username: string;
    /**
     * @generated from protobuf field: int32 multiplied_score = 5;
     */
    multipliedScore: number;
    /**
     * @generated from protobuf field: int32 modified_score = 6;
     */
    modifiedScore: number;
    /**
     * @generated from protobuf field: int32 max_possible_score = 7;
     */
    maxPossibleScore: number;
    /**
     * @generated from protobuf field: double accuracy = 8;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: int32 notes_missed = 9;
     */
    notesMissed: number;
    /**
     * @generated from protobuf field: int32 bad_cuts = 10;
     */
    badCuts: number;
    /**
     * @generated from protobuf field: int32 good_cuts = 11;
     */
    goodCuts: number;
    /**
     * @generated from protobuf field: int32 max_combo = 12;
     */
    maxCombo: number;
    /**
     * @generated from protobuf field: bool full_combo = 13;
     */
    fullCombo: boolean;
    /**
     * @generated from protobuf field: bool is_placeholder = 14;
     */
    isPlaceholder: boolean;
    /**
     * @generated from protobuf field: string color = 15;
     */
    color: string;
}
/**
 * @generated from protobuf message proto.models.RealtimeScore
 */
export interface RealtimeScore {
    /**
     * @generated from protobuf field: string user_guid = 1;
     */
    userGuid: string;
    /**
     * @generated from protobuf field: int32 score = 2;
     */
    score: number;
    /**
     * @generated from protobuf field: int32 score_with_modifiers = 3;
     */
    scoreWithModifiers: number;
    /**
     * @generated from protobuf field: int32 max_score = 4;
     */
    maxScore: number;
    /**
     * @generated from protobuf field: int32 max_score_with_modifiers = 5;
     */
    maxScoreWithModifiers: number;
    /**
     * @generated from protobuf field: int32 combo = 6;
     */
    combo: number;
    /**
     * @generated from protobuf field: float player_health = 7;
     */
    playerHealth: number;
    /**
     * @generated from protobuf field: float accuracy = 8;
     */
    accuracy: number;
    /**
     * @generated from protobuf field: float song_position = 9;
     */
    songPosition: number;
    /**
     * @generated from protobuf field: int32 notes_missed = 10;
     */
    notesMissed: number;
    /**
     * @generated from protobuf field: int32 bad_cuts = 11;
     */
    badCuts: number;
    /**
     * @generated from protobuf field: int32 bomb_hits = 12;
     */
    bombHits: number;
    /**
     * @generated from protobuf field: int32 wall_hits = 13;
     */
    wallHits: number;
    /**
     * @generated from protobuf field: int32 max_combo = 14;
     */
    maxCombo: number;
    /**
     * @generated from protobuf field: proto.models.ScoreTrackerHand left_hand = 15;
     */
    leftHand?: ScoreTrackerHand;
    /**
     * @generated from protobuf field: proto.models.ScoreTrackerHand right_hand = 16;
     */
    rightHand?: ScoreTrackerHand;
}
/**
 * @generated from protobuf message proto.models.ScoreTrackerHand
 */
export interface ScoreTrackerHand {
    /**
     * @generated from protobuf field: int32 hit = 1;
     */
    hit: number;
    /**
     * @generated from protobuf field: int32 miss = 2;
     */
    miss: number;
    /**
     * @generated from protobuf field: int32 bad_cut = 3;
     */
    badCut: number;
    /**
     * @generated from protobuf field: repeated float avg_cut = 4;
     */
    avgCut: number[];
}
/**
 * @generated from protobuf enum proto.models.Permissions
 */
export declare enum Permissions {
    /**
     * @generated from protobuf enum value: None = 0;
     */
    None = 0,
    /**
     * @generated from protobuf enum value: View = 1;
     */
    View = 1,
    /**
     * @generated from protobuf enum value: Admin = 2;
     */
    Admin = 2
}
declare class Characteristic$Type extends MessageType<Characteristic> {
    constructor();
    create(value?: PartialMessage<Characteristic>): Characteristic;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Characteristic): Characteristic;
    internalBinaryWrite(message: Characteristic, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Characteristic
 */
export declare const Characteristic: Characteristic$Type;
declare class Beatmap$Type extends MessageType<Beatmap> {
    constructor();
    create(value?: PartialMessage<Beatmap>): Beatmap;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Beatmap): Beatmap;
    internalBinaryWrite(message: Beatmap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Beatmap
 */
export declare const Beatmap: Beatmap$Type;
declare class GameplayModifiers$Type extends MessageType<GameplayModifiers> {
    constructor();
    create(value?: PartialMessage<GameplayModifiers>): GameplayModifiers;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayModifiers): GameplayModifiers;
    internalBinaryWrite(message: GameplayModifiers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.GameplayModifiers
 */
export declare const GameplayModifiers: GameplayModifiers$Type;
declare class PlayerSpecificSettings$Type extends MessageType<PlayerSpecificSettings> {
    constructor();
    create(value?: PartialMessage<PlayerSpecificSettings>): PlayerSpecificSettings;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSpecificSettings): PlayerSpecificSettings;
    internalBinaryWrite(message: PlayerSpecificSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.PlayerSpecificSettings
 */
export declare const PlayerSpecificSettings: PlayerSpecificSettings$Type;
declare class GameplayParameters$Type extends MessageType<GameplayParameters> {
    constructor();
    create(value?: PartialMessage<GameplayParameters>): GameplayParameters;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayParameters): GameplayParameters;
    internalBinaryWrite(message: GameplayParameters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.GameplayParameters
 */
export declare const GameplayParameters: GameplayParameters$Type;
declare class Map$Type extends MessageType<Map> {
    constructor();
    create(value?: PartialMessage<Map>): Map;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Map): Map;
    internalBinaryWrite(message: Map, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Map
 */
export declare const Map: Map$Type;
declare class User$Type extends MessageType<User> {
    constructor();
    create(value?: PartialMessage<User>): User;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User;
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.User
 */
export declare const User: User$Type;
declare class User_DiscordInfo$Type extends MessageType<User_DiscordInfo> {
    constructor();
    create(value?: PartialMessage<User_DiscordInfo>): User_DiscordInfo;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_DiscordInfo): User_DiscordInfo;
    internalBinaryWrite(message: User_DiscordInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.User.DiscordInfo
 */
export declare const User_DiscordInfo: User_DiscordInfo$Type;
declare class User_Point$Type extends MessageType<User_Point> {
    constructor();
    create(value?: PartialMessage<User_Point>): User_Point;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User_Point): User_Point;
    internalBinaryWrite(message: User_Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.User.Point
 */
export declare const User_Point: User_Point$Type;
declare class Match$Type extends MessageType<Match> {
    constructor();
    create(value?: PartialMessage<Match>): Match;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Match): Match;
    internalBinaryWrite(message: Match, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Match
 */
export declare const Match: Match$Type;
declare class QualifierEvent$Type extends MessageType<QualifierEvent> {
    constructor();
    create(value?: PartialMessage<QualifierEvent>): QualifierEvent;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QualifierEvent): QualifierEvent;
    internalBinaryWrite(message: QualifierEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.QualifierEvent
 */
export declare const QualifierEvent: QualifierEvent$Type;
declare class CoreServer$Type extends MessageType<CoreServer> {
    constructor();
    create(value?: PartialMessage<CoreServer>): CoreServer;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CoreServer): CoreServer;
    internalBinaryWrite(message: CoreServer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.CoreServer
 */
export declare const CoreServer: CoreServer$Type;
declare class Tournament$Type extends MessageType<Tournament> {
    constructor();
    create(value?: PartialMessage<Tournament>): Tournament;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament): Tournament;
    internalBinaryWrite(message: Tournament, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament
 */
export declare const Tournament: Tournament$Type;
declare class Tournament_TournamentSettings$Type extends MessageType<Tournament_TournamentSettings> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings>): Tournament_TournamentSettings;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings): Tournament_TournamentSettings;
    internalBinaryWrite(message: Tournament_TournamentSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings
 */
export declare const Tournament_TournamentSettings: Tournament_TournamentSettings$Type;
declare class Tournament_TournamentSettings_Pool$Type extends MessageType<Tournament_TournamentSettings_Pool> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings_Pool>): Tournament_TournamentSettings_Pool;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings_Pool): Tournament_TournamentSettings_Pool;
    internalBinaryWrite(message: Tournament_TournamentSettings_Pool, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings.Pool
 */
export declare const Tournament_TournamentSettings_Pool: Tournament_TournamentSettings_Pool$Type;
declare class Tournament_TournamentSettings_Team$Type extends MessageType<Tournament_TournamentSettings_Team> {
    constructor();
    create(value?: PartialMessage<Tournament_TournamentSettings_Team>): Tournament_TournamentSettings_Team;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tournament_TournamentSettings_Team): Tournament_TournamentSettings_Team;
    internalBinaryWrite(message: Tournament_TournamentSettings_Team, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.Tournament.TournamentSettings.Team
 */
export declare const Tournament_TournamentSettings_Team: Tournament_TournamentSettings_Team$Type;
declare class State$Type extends MessageType<State> {
    constructor();
    create(value?: PartialMessage<State>): State;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: State): State;
    internalBinaryWrite(message: State, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.State
 */
export declare const State: State$Type;
declare class LeaderboardEntry$Type extends MessageType<LeaderboardEntry> {
    constructor();
    create(value?: PartialMessage<LeaderboardEntry>): LeaderboardEntry;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaderboardEntry): LeaderboardEntry;
    internalBinaryWrite(message: LeaderboardEntry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.LeaderboardEntry
 */
export declare const LeaderboardEntry: LeaderboardEntry$Type;
declare class RealtimeScore$Type extends MessageType<RealtimeScore> {
    constructor();
    create(value?: PartialMessage<RealtimeScore>): RealtimeScore;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RealtimeScore): RealtimeScore;
    internalBinaryWrite(message: RealtimeScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.RealtimeScore
 */
export declare const RealtimeScore: RealtimeScore$Type;
declare class ScoreTrackerHand$Type extends MessageType<ScoreTrackerHand> {
    constructor();
    create(value?: PartialMessage<ScoreTrackerHand>): ScoreTrackerHand;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScoreTrackerHand): ScoreTrackerHand;
    internalBinaryWrite(message: ScoreTrackerHand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message proto.models.ScoreTrackerHand
 */
export declare const ScoreTrackerHand: ScoreTrackerHand$Type;
export {};
